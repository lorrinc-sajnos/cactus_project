//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/BME/sem6/onlab/Builds/build_1/CactusLang/Grammar/CactusGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CactusGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INCLUDE_HEADER=5, ID=6, TYPE=7, PARAM=8, 
		BODY_OPN=9, BODY_CLS=10, SPRT=11, L_STRING=12, FILEPATH=13, TAG=14, CONST=15, 
		CONST_INT=16, CONST_INT_DEC=17, CONST_INT_HEX=18, CONST_FLOAT=19, CONST_STRING=20, 
		BIN_OP=21, UNARY_OP=22, LUNOP=23, RUNOP=24, VAL_OPERATOR=25, COMP_OPERATOR=26, 
		ASSIGN=27, OP_ASG=28, OP_ADD=29, OP_NEG=30, OP_STAR=31, OP_DIV=32, OP_AND=33, 
		OP_OR=34, OP_XOR=35, OP_LSH=36, OP_RSH=37, OP_EQL=38, OP_BAND=39, OP_BOR=40, 
		OP_NEQ=41, OP_NOT=42, OP_LST=43, OP_GRT=44, OP_ACC=45, OP_REF=46, WHITESPACE=47, 
		NEWLINE=48, COMMENT=49;
	public const int
		RULE_codefile = 0, RULE_glob_statement = 1, RULE_prepoc_statement = 2, 
		RULE_func_header = 3, RULE_func_dcl = 4, RULE_field_dcl = 5, RULE_struct_header = 6, 
		RULE_struct_dcl = 7, RULE_code_body = 8, RULE_statement = 9, RULE_var_name = 10, 
		RULE_var_dcl = 11, RULE_assign = 12, RULE_value = 13, RULE_func_call = 14, 
		RULE_expression = 15;
	public static readonly string[] ruleNames = {
		"codefile", "glob_statement", "prepoc_statement", "func_header", "func_dcl", 
		"field_dcl", "struct_header", "struct_dcl", "code_body", "statement", 
		"var_name", "var_dcl", "assign", "value", "func_call", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'struct'", "'include'", null, null, null, 
		"'{'", "'}'", "';'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'='", "'+'", "'-'", "'*'", 
		null, "'&'", "'|'", "'^'", "'<<'", "'>>'", "'=='", "'&&'", "'||'", "'!='", 
		"'!'", "'<'", "'>'", "':'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INCLUDE_HEADER", "ID", "TYPE", "PARAM", 
		"BODY_OPN", "BODY_CLS", "SPRT", "L_STRING", "FILEPATH", "TAG", "CONST", 
		"CONST_INT", "CONST_INT_DEC", "CONST_INT_HEX", "CONST_FLOAT", "CONST_STRING", 
		"BIN_OP", "UNARY_OP", "LUNOP", "RUNOP", "VAL_OPERATOR", "COMP_OPERATOR", 
		"ASSIGN", "OP_ASG", "OP_ADD", "OP_NEG", "OP_STAR", "OP_DIV", "OP_AND", 
		"OP_OR", "OP_XOR", "OP_LSH", "OP_RSH", "OP_EQL", "OP_BAND", "OP_BOR", 
		"OP_NEQ", "OP_NOT", "OP_LST", "OP_GRT", "OP_ACC", "OP_REF", "WHITESPACE", 
		"NEWLINE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CactusGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CactusGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CactusGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CactusGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodefileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CactusGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Glob_statementContext[] glob_statement() {
			return GetRuleContexts<Glob_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Glob_statementContext glob_statement(int i) {
			return GetRuleContext<Glob_statementContext>(i);
		}
		public CodefileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codefile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitCodefile(this);
		}
	}

	[RuleVersion(0)]
	public CodefileContext codefile() {
		CodefileContext _localctx = new CodefileContext(Context, State);
		EnterRule(_localctx, 0, RULE_codefile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16560L) != 0)) {
				{
				{
				State = 32;
				glob_statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Glob_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prepoc_statementContext prepoc_statement() {
			return GetRuleContext<Prepoc_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext func_dcl() {
			return GetRuleContext<Func_dclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_dclContext struct_dcl() {
			return GetRuleContext<Struct_dclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext field_dcl() {
			return GetRuleContext<Field_dclContext>(0);
		}
		public Glob_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_glob_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterGlob_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitGlob_statement(this);
		}
	}

	[RuleVersion(0)]
	public Glob_statementContext glob_statement() {
		Glob_statementContext _localctx = new Glob_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_glob_statement);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				prepoc_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				func_dcl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				struct_dcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43;
				field_dcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prepoc_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE_HEADER() { return GetToken(CactusGrammarParser.INCLUDE_HEADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(CactusGrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEPATH() { return GetToken(CactusGrammarParser.FILEPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(CactusGrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRT() { return GetToken(CactusGrammarParser.SPRT, 0); }
		public Prepoc_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepoc_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterPrepoc_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitPrepoc_statement(this);
		}
	}

	[RuleVersion(0)]
	public Prepoc_statementContext prepoc_statement() {
		Prepoc_statementContext _localctx = new Prepoc_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_prepoc_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 46;
			Match(INCLUDE_HEADER);
			State = 47;
			Match(OP_LST);
			State = 48;
			Match(FILEPATH);
			State = 49;
			Match(OP_GRT);
			State = 50;
			Match(SPRT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CactusGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CactusGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(CactusGrammarParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(CactusGrammarParser.TAG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARAM() { return GetTokens(CactusGrammarParser.PARAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM(int i) {
			return GetToken(CactusGrammarParser.PARAM, i);
		}
		public Func_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_header(this);
		}
	}

	[RuleVersion(0)]
	public Func_headerContext func_header() {
		Func_headerContext _localctx = new Func_headerContext(Context, State);
		EnterRule(_localctx, 6, RULE_func_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 52;
				Match(TAG);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(TYPE);
			State = 59;
			Match(ID);
			State = 60;
			Match(T__0);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAM) {
				{
				State = 61;
				Match(PARAM);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 62;
					Match(T__1);
					State = 63;
					Match(PARAM);
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 71;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_headerContext func_header() {
			return GetRuleContext<Func_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body() {
			return GetRuleContext<Code_bodyContext>(0);
		}
		public Func_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_dcl(this);
		}
	}

	[RuleVersion(0)]
	public Func_dclContext func_dcl() {
		Func_dclContext _localctx = new Func_dclContext(Context, State);
		EnterRule(_localctx, 8, RULE_func_dcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			func_header();
			State = 74;
			code_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CactusGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CactusGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRT() { return GetToken(CactusGrammarParser.SPRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(CactusGrammarParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(CactusGrammarParser.TAG, i);
		}
		public Field_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterField_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitField_dcl(this);
		}
	}

	[RuleVersion(0)]
	public Field_dclContext field_dcl() {
		Field_dclContext _localctx = new Field_dclContext(Context, State);
		EnterRule(_localctx, 10, RULE_field_dcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 76;
				Match(TAG);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(TYPE);
			State = 83;
			Match(ID);
			State = 84;
			Match(SPRT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CactusGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(CactusGrammarParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(CactusGrammarParser.TAG, i);
		}
		public Struct_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_header(this);
		}
	}

	[RuleVersion(0)]
	public Struct_headerContext struct_header() {
		Struct_headerContext _localctx = new Struct_headerContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 86;
				Match(TAG);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(T__3);
			State = 93;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_headerContext struct_header() {
			return GetRuleContext<Struct_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(CactusGrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(CactusGrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext[] func_dcl() {
			return GetRuleContexts<Func_dclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext func_dcl(int i) {
			return GetRuleContext<Func_dclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext[] field_dcl() {
			return GetRuleContexts<Field_dclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext field_dcl(int i) {
			return GetRuleContext<Field_dclContext>(i);
		}
		public Struct_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_dcl(this);
		}
	}

	[RuleVersion(0)]
	public Struct_dclContext struct_dcl() {
		Struct_dclContext _localctx = new Struct_dclContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_dcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			struct_header();
			State = 96;
			Match(BODY_OPN);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE || _la==TAG) {
				{
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 97;
					func_dcl();
					}
					break;
				case 2:
					{
					State = 98;
					field_dcl();
					}
					break;
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(CactusGrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(CactusGrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPRT() { return GetTokens(CactusGrammarParser.SPRT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRT(int i) {
			return GetToken(CactusGrammarParser.SPRT, i);
		}
		public Code_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterCode_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitCode_body(this);
		}
	}

	[RuleVersion(0)]
	public Code_bodyContext code_body() {
		Code_bodyContext _localctx = new Code_bodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_code_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(BODY_OPN);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32962L) != 0)) {
				{
				{
				State = 107;
				statement();
				State = 108;
				Match(SPRT);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_dclContext var_dcl() {
			return GetRuleContext<Var_dclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				var_dcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CactusGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CactusGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_ACC() { return GetTokens(CactusGrammarParser.OP_ACC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC(int i) {
			return GetToken(CactusGrammarParser.OP_ACC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_REF() { return GetTokens(CactusGrammarParser.OP_REF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF(int i) {
			return GetToken(CactusGrammarParser.OP_REF, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_var_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(ID);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_ACC || _la==OP_REF) {
				{
				{
				State = 123;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_ACC || _la==OP_REF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 124;
				Match(ID);
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CactusGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CactusGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(CactusGrammarParser.OP_ASG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Var_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterVar_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitVar_dcl(this);
		}
	}

	[RuleVersion(0)]
	public Var_dclContext var_dcl() {
		Var_dclContext _localctx = new Var_dclContext(Context, State);
		EnterRule(_localctx, 22, RULE_var_dcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(TYPE);
			State = 131;
			Match(ID);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASG) {
				{
				State = 132;
				Match(OP_ASG);
				State = 133;
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CactusGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 24, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			var_name();
			State = 137;
			Match(ASSIGN);
			State = 138;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(CactusGrammarParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(CONST);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				var_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 142;
				func_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143;
				Match(T__0);
				State = 144;
				expression();
				State = 145;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_call(this);
		}
	}

	[RuleVersion(0)]
	public Func_callContext func_call() {
		Func_callContext _localctx = new Func_callContext(Context, State);
		EnterRule(_localctx, 28, RULE_func_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			var_name();
			State = 150;
			Match(T__0);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32834L) != 0)) {
				{
				State = 151;
				expression();
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 152;
					Match(T__1);
					State = 153;
					expression();
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 161;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_OP() { return GetToken(CactusGrammarParser.BIN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICactusGrammarListener typedListener = listener as ICactusGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			value();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BIN_OP) {
				{
				State = 164;
				Match(BIN_OP);
				State = 165;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,49,169,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,
		45,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,5,3,54,8,3,10,3,12,3,57,9,3,1,3,1,3,
		1,3,1,3,1,3,1,3,5,3,65,8,3,10,3,12,3,68,9,3,3,3,70,8,3,1,3,1,3,1,4,1,4,
		1,4,1,5,5,5,78,8,5,10,5,12,5,81,9,5,1,5,1,5,1,5,1,5,1,6,5,6,88,8,6,10,
		6,12,6,91,9,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,5,7,100,8,7,10,7,12,7,103,9,
		7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,111,8,8,10,8,12,8,114,9,8,1,8,1,8,1,9,1,
		9,1,9,3,9,121,8,9,1,10,1,10,1,10,5,10,126,8,10,10,10,12,10,129,9,10,1,
		11,1,11,1,11,1,11,3,11,135,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,148,8,13,1,14,1,14,1,14,1,14,1,14,5,14,155,8,14,10,
		14,12,14,158,9,14,3,14,160,8,14,1,14,1,14,1,15,1,15,1,15,3,15,167,8,15,
		1,15,0,0,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,1,1,0,45,46,174,
		0,35,1,0,0,0,2,44,1,0,0,0,4,46,1,0,0,0,6,55,1,0,0,0,8,73,1,0,0,0,10,79,
		1,0,0,0,12,89,1,0,0,0,14,95,1,0,0,0,16,106,1,0,0,0,18,120,1,0,0,0,20,122,
		1,0,0,0,22,130,1,0,0,0,24,136,1,0,0,0,26,147,1,0,0,0,28,149,1,0,0,0,30,
		163,1,0,0,0,32,34,3,2,1,0,33,32,1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,0,35,
		36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,5,0,0,1,39,1,1,0,0,0,40,45,
		3,4,2,0,41,45,3,8,4,0,42,45,3,14,7,0,43,45,3,10,5,0,44,40,1,0,0,0,44,41,
		1,0,0,0,44,42,1,0,0,0,44,43,1,0,0,0,45,3,1,0,0,0,46,47,5,5,0,0,47,48,5,
		43,0,0,48,49,5,13,0,0,49,50,5,44,0,0,50,51,5,11,0,0,51,5,1,0,0,0,52,54,
		5,14,0,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,
		1,0,0,0,57,55,1,0,0,0,58,59,5,7,0,0,59,60,5,6,0,0,60,69,5,1,0,0,61,66,
		5,8,0,0,62,63,5,2,0,0,63,65,5,8,0,0,64,62,1,0,0,0,65,68,1,0,0,0,66,64,
		1,0,0,0,66,67,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,69,61,1,0,0,0,69,70,
		1,0,0,0,70,71,1,0,0,0,71,72,5,3,0,0,72,7,1,0,0,0,73,74,3,6,3,0,74,75,3,
		16,8,0,75,9,1,0,0,0,76,78,5,14,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,
		0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,7,0,0,83,84,5,
		6,0,0,84,85,5,11,0,0,85,11,1,0,0,0,86,88,5,14,0,0,87,86,1,0,0,0,88,91,
		1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,
		5,4,0,0,93,94,5,6,0,0,94,13,1,0,0,0,95,96,3,12,6,0,96,101,5,9,0,0,97,100,
		3,8,4,0,98,100,3,10,5,0,99,97,1,0,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,
		99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,5,10,
		0,0,105,15,1,0,0,0,106,112,5,9,0,0,107,108,3,18,9,0,108,109,5,11,0,0,109,
		111,1,0,0,0,110,107,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,
		0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,116,5,10,0,0,116,17,1,0,0,0,
		117,121,3,22,11,0,118,121,3,24,12,0,119,121,3,30,15,0,120,117,1,0,0,0,
		120,118,1,0,0,0,120,119,1,0,0,0,121,19,1,0,0,0,122,127,5,6,0,0,123,124,
		7,0,0,0,124,126,5,6,0,0,125,123,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,
		0,127,128,1,0,0,0,128,21,1,0,0,0,129,127,1,0,0,0,130,131,5,7,0,0,131,134,
		5,6,0,0,132,133,5,28,0,0,133,135,3,26,13,0,134,132,1,0,0,0,134,135,1,0,
		0,0,135,23,1,0,0,0,136,137,3,20,10,0,137,138,5,27,0,0,138,139,3,30,15,
		0,139,25,1,0,0,0,140,148,5,15,0,0,141,148,3,20,10,0,142,148,3,28,14,0,
		143,144,5,1,0,0,144,145,3,30,15,0,145,146,5,3,0,0,146,148,1,0,0,0,147,
		140,1,0,0,0,147,141,1,0,0,0,147,142,1,0,0,0,147,143,1,0,0,0,148,27,1,0,
		0,0,149,150,3,20,10,0,150,159,5,1,0,0,151,156,3,30,15,0,152,153,5,2,0,
		0,153,155,3,30,15,0,154,152,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,
		157,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,159,151,1,0,0,0,159,160,1,
		0,0,0,160,161,1,0,0,0,161,162,5,3,0,0,162,29,1,0,0,0,163,166,3,26,13,0,
		164,165,5,21,0,0,165,167,3,30,15,0,166,164,1,0,0,0,166,167,1,0,0,0,167,
		31,1,0,0,0,17,35,44,55,66,69,79,89,99,101,112,120,127,134,147,156,159,
		166
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
