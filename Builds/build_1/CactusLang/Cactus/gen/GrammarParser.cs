//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/warehouse/BME/sem6/onlab/cactus_project/Builds/build_1/CactusLang/Cactus/Grammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KYW_INCLUDE=1, KYW_STRUCT=2, KYW_CLASS=3, KYW_IMPLEMENTS=4, KYW_TRUE=5, 
		KYW_FALSE=6, KYW_NULL=7, KYW_IF=8, KYW_ELSE=9, KYW_FOR=10, KYW_WHILE=11, 
		KYW_RETURN=12, KYW_BREAK=13, KYW_CONTINUE=14, KYW_FREE=15, KYW_ALLOC=16, 
		TAG_PRFX=17, UNOP_INC=18, UNOP_DCR=19, LUNOP_L_NOT=20, LUNOP_B_NOT=21, 
		LUNOP_SIZEOF=22, OP_ASG=23, OP_STAR=24, OP_DIV=25, OP_REM=26, OP_ADD=27, 
		OP_SUB=28, OP_AND=29, OP_B_OR=30, OP_B_XOR=31, OP_LSH=32, OP_RSH=33, OP_EQL=34, 
		OP_L_AND=35, OP_L_OR=36, OP_NEQ=37, OP_LST=38, OP_GRT=39, OP_LSEQ=40, 
		OP_GREQ=41, OP_LAMDA=42, OP_ACC=43, OP_REF=44, COMMA=45, BODY_OPN=46, 
		BODY_CLS=47, PARN_OPN=48, PARN_CLS=49, SQPN_OPN=50, SQPN_CLS=51, PPC_C_BODY_OPN=52, 
		PPC_C_BODY_CLS=53, PPC_C_CODE=54, PPC_C_LAMDA=55, S_QT=56, D_QT=57, EOS=58, 
		SIGN=59, INT_STR=60, HEX_STR=61, OCT_STR=62, BIN_STR=63, CHAR=64, STRING=65, 
		TAG=66, ID=67, PPC_ID=68, PPC_DEEP_ID=69, COMMENT=70, LINE_COMMENT=71, 
		WHITESPACE=72, NEWLINE=73;
	public const int
		RULE_codefile = 0, RULE_tags = 1, RULE_globStatement = 2, RULE_preprocessor_stm = 3, 
		RULE_filepath = 4, RULE_ppc__Include = 5, RULE_ptrLvl = 6, RULE_type = 7, 
		RULE_func_dcl_header = 8, RULE_func_dcl = 9, RULE_func_lamd_body = 10, 
		RULE_returnType = 11, RULE_param = 12, RULE_funcName = 13, RULE_varName = 14, 
		RULE_field_dcl = 15, RULE_struct_name = 16, RULE_struct_dcl = 17, RULE_struct_body = 18, 
		RULE_class_name = 19, RULE_class_dcl = 20, RULE_parent_class = 21, RULE_interface = 22, 
		RULE_interfaces = 23, RULE_class_body = 24, RULE_codeBody = 25, RULE_statement = 26, 
		RULE_varDcl = 27, RULE_expression = 28, RULE_op_MultLvl = 29, RULE_op_AddLvl = 30, 
		RULE_op_BitLvl = 31, RULE_op_CompLvl = 32, RULE_primaryExp = 33, RULE_op_lUn = 34, 
		RULE_op_rUn = 35, RULE_primaryExpVal = 36, RULE_parenthsExp = 37, RULE_miscPrimeExp = 38, 
		RULE_alloc = 39, RULE_free = 40, RULE_explicitCast = 41, RULE_assignment = 42, 
		RULE_funcCall = 43, RULE_funcParamVals = 44, RULE_funcRef = 45, RULE_literalExp = 46, 
		RULE_nullLiteral = 47, RULE_numLiteral = 48, RULE_intLiteral = 49, RULE_intDecLiteral = 50, 
		RULE_intHexLiteral = 51, RULE_intBinLiteral = 52, RULE_intOctLiteral = 53, 
		RULE_floatLiteral = 54, RULE_strLiteral = 55, RULE_charLiteral = 56, RULE_boolLiteral = 57, 
		RULE_varRef = 58, RULE_ifStatement = 59, RULE_elseStatement = 60, RULE_returnStatement = 61, 
		RULE_continueStatement = 62, RULE_breakStatement = 63, RULE_loopDecl = 64, 
		RULE_loopCond = 65, RULE_endExp = 66, RULE_forLoop = 67, RULE_whileLoop = 68, 
		RULE_ppc__C_Code_Body = 69, RULE_ppc__C_id = 70, RULE_ppc__C_Func = 71, 
		RULE_ppc__C_Func_Map = 72, RULE_ppc__varRef = 73, RULE_ppc__funcRef = 74, 
		RULE_ppc__funcCall = 75, RULE_ppc__Token = 76;
	public static readonly string[] ruleNames = {
		"codefile", "tags", "globStatement", "preprocessor_stm", "filepath", "ppc__Include", 
		"ptrLvl", "type", "func_dcl_header", "func_dcl", "func_lamd_body", "returnType", 
		"param", "funcName", "varName", "field_dcl", "struct_name", "struct_dcl", 
		"struct_body", "class_name", "class_dcl", "parent_class", "interface", 
		"interfaces", "class_body", "codeBody", "statement", "varDcl", "expression", 
		"op_MultLvl", "op_AddLvl", "op_BitLvl", "op_CompLvl", "primaryExp", "op_lUn", 
		"op_rUn", "primaryExpVal", "parenthsExp", "miscPrimeExp", "alloc", "free", 
		"explicitCast", "assignment", "funcCall", "funcParamVals", "funcRef", 
		"literalExp", "nullLiteral", "numLiteral", "intLiteral", "intDecLiteral", 
		"intHexLiteral", "intBinLiteral", "intOctLiteral", "floatLiteral", "strLiteral", 
		"charLiteral", "boolLiteral", "varRef", "ifStatement", "elseStatement", 
		"returnStatement", "continueStatement", "breakStatement", "loopDecl", 
		"loopCond", "endExp", "forLoop", "whileLoop", "ppc__C_Code_Body", "ppc__C_id", 
		"ppc__C_Func", "ppc__C_Func_Map", "ppc__varRef", "ppc__funcRef", "ppc__funcCall", 
		"ppc__Token"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'struct'", "'class'", "'implements'", "'true'", "'false'", 
		"'nullptr'", "'if'", "'else'", "'for'", "'while'", "'return'", "'break'", 
		"'continue'", "'free'", "'alloc'", "'@'", "'++'", "'--'", "'!'", "'~'", 
		"'sizeof'", "'='", "'*'", null, "'%'", "'+'", "'-'", "'&'", "'|'", "'^'", 
		"'<<'", "'>>'", "'=='", "'&&'", "'||'", "'!='", "'<'", "'>'", "'<='", 
		"'>='", "'=>'", "':'", "'.'", "','", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", null, null, null, null, "'''", "'\"'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KYW_INCLUDE", "KYW_STRUCT", "KYW_CLASS", "KYW_IMPLEMENTS", "KYW_TRUE", 
		"KYW_FALSE", "KYW_NULL", "KYW_IF", "KYW_ELSE", "KYW_FOR", "KYW_WHILE", 
		"KYW_RETURN", "KYW_BREAK", "KYW_CONTINUE", "KYW_FREE", "KYW_ALLOC", "TAG_PRFX", 
		"UNOP_INC", "UNOP_DCR", "LUNOP_L_NOT", "LUNOP_B_NOT", "LUNOP_SIZEOF", 
		"OP_ASG", "OP_STAR", "OP_DIV", "OP_REM", "OP_ADD", "OP_SUB", "OP_AND", 
		"OP_B_OR", "OP_B_XOR", "OP_LSH", "OP_RSH", "OP_EQL", "OP_L_AND", "OP_L_OR", 
		"OP_NEQ", "OP_LST", "OP_GRT", "OP_LSEQ", "OP_GREQ", "OP_LAMDA", "OP_ACC", 
		"OP_REF", "COMMA", "BODY_OPN", "BODY_CLS", "PARN_OPN", "PARN_CLS", "SQPN_OPN", 
		"SQPN_CLS", "PPC_C_BODY_OPN", "PPC_C_BODY_CLS", "PPC_C_CODE", "PPC_C_LAMDA", 
		"S_QT", "D_QT", "EOS", "SIGN", "INT_STR", "HEX_STR", "OCT_STR", "BIN_STR", 
		"CHAR", "STRING", "TAG", "ID", "PPC_ID", "PPC_DEEP_ID", "COMMENT", "LINE_COMMENT", 
		"WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodefileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobStatementContext[] globStatement() {
			return GetRuleContexts<GlobStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobStatementContext globStatement(int i) {
			return GetRuleContext<GlobStatementContext>(i);
		}
		public CodefileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codefile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodefile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodefileContext codefile() {
		CodefileContext _localctx = new CodefileContext(Context, State);
		EnterRule(_localctx, 0, RULE_codefile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0) || _la==TAG || _la==ID) {
				{
				{
				State = 154;
				globStatement();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(GrammarParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(GrammarParser.TAG, i);
		}
		public TagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tags; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTags(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTags(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagsContext tags() {
		TagsContext _localctx = new TagsContext(Context, State);
		EnterRule(_localctx, 2, RULE_tags);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 162;
					Match(TAG);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_stmContext preprocessor_stm() {
			return GetRuleContext<Preprocessor_stmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext field_dcl() {
			return GetRuleContext<Field_dclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext func_dcl() {
			return GetRuleContext<Func_dclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_dclContext struct_dcl() {
			return GetRuleContext<Struct_dclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_dclContext class_dcl() {
			return GetRuleContext<Class_dclContext>(0);
		}
		public GlobStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGlobStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGlobStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobStatementContext globStatement() {
		GlobStatementContext _localctx = new GlobStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_globStatement);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				preprocessor_stm();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				tags();
				State = 169;
				Match(EOS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				field_dcl();
				State = 172;
				Match(EOS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				func_dcl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				struct_dcl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 176;
				class_dcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_stmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__IncludeContext ppc__Include() {
			return GetRuleContext<Ppc__IncludeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		public Preprocessor_stmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_stm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPreprocessor_stm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPreprocessor_stm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_stm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_stmContext preprocessor_stm() {
		Preprocessor_stmContext _localctx = new Preprocessor_stmContext(Context, State);
		EnterRule(_localctx, 6, RULE_preprocessor_stm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ppc__Include();
			State = 180;
			Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilepathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_DIV() { return GetTokens(GrammarParser.OP_DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV(int i) {
			return GetToken(GrammarParser.OP_DIV, i);
		}
		public FilepathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filepath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFilepath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFilepath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilepath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilepathContext filepath() {
		FilepathContext _localctx = new FilepathContext(Context, State);
		EnterRule(_localctx, 8, RULE_filepath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(OP_LST);
			State = 183;
			Match(ID);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_DIV) {
				{
				{
				State = 184;
				Match(OP_DIV);
				State = 185;
				Match(ID);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			Match(OP_GRT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_INCLUDE() { return GetToken(GrammarParser.KYW_INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilepathContext filepath() {
			return GetRuleContext<FilepathContext>(0);
		}
		public Ppc__IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__Include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__Include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__Include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__Include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__IncludeContext ppc__Include() {
		Ppc__IncludeContext _localctx = new Ppc__IncludeContext(Context, State);
		EnterRule(_localctx, 10, RULE_ppc__Include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(KYW_INCLUDE);
			State = 194;
			filepath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_STAR() { return GetTokens(GrammarParser.OP_STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_STAR(int i) {
			return GetToken(GrammarParser.OP_STAR, i);
		}
		public PtrLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPtrLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPtrLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrLvlContext ptrLvl() {
		PtrLvlContext _localctx = new PtrLvlContext(Context, State);
		EnterRule(_localctx, 12, RULE_ptrLvl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 196;
					Match(OP_STAR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PtrLvlContext ptrLvl() {
			return GetRuleContext<PtrLvlContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(ID);
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 202;
				ptrLvl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_dcl_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncNameContext funcName() {
			return GetRuleContext<FuncNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public Func_dcl_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_dcl_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_dcl_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_dcl_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_dcl_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_dcl_headerContext func_dcl_header() {
		Func_dcl_headerContext _localctx = new Func_dcl_headerContext(Context, State);
		EnterRule(_localctx, 16, RULE_func_dcl_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 205;
				tags();
				}
			}

			State = 208;
			returnType();
			State = 209;
			funcName();
			State = 210;
			Match(PARN_OPN);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 211;
				param();
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 212;
					Match(COMMA);
					State = 213;
					param();
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 221;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_dcl_headerContext func_dcl_header() {
			return GetRuleContext<Func_dcl_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_lamd_bodyContext func_lamd_body() {
			return GetRuleContext<Func_lamd_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_Code_BodyContext ppc__C_Code_Body() {
			return GetRuleContext<Ppc__C_Code_BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_Func_MapContext ppc__C_Func_Map() {
			return GetRuleContext<Ppc__C_Func_MapContext>(0);
		}
		public Func_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_dcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_dclContext func_dcl() {
		Func_dclContext _localctx = new Func_dclContext(Context, State);
		EnterRule(_localctx, 18, RULE_func_dcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			func_dcl_header();
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BODY_OPN:
				{
				State = 224;
				codeBody();
				}
				break;
			case OP_LAMDA:
				{
				State = 225;
				func_lamd_body();
				State = 226;
				Match(EOS);
				}
				break;
			case PPC_C_CODE:
				{
				State = 228;
				ppc__C_Code_Body();
				}
				break;
			case PPC_C_LAMDA:
				{
				State = 229;
				ppc__C_Func_Map();
				State = 230;
				Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_lamd_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMDA() { return GetToken(GrammarParser.OP_LAMDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Func_lamd_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_lamd_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_lamd_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_lamd_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_lamd_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_lamd_bodyContext func_lamd_body() {
		Func_lamd_bodyContext _localctx = new Func_lamd_bodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_func_lamd_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(OP_LAMDA);
			State = 235;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 24, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			type();
			State = 240;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public FuncNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncNameContext funcName() {
		FuncNameContext _localctx = new FuncNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_funcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext[] varName() {
			return GetRuleContexts<VarNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName(int i) {
			return GetRuleContext<VarNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public Field_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterField_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitField_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_dcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_dclContext field_dcl() {
		Field_dclContext _localctx = new Field_dclContext(Context, State);
		EnterRule(_localctx, 30, RULE_field_dcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 246;
				tags();
				}
			}

			State = 249;
			type();
			State = 250;
			varName();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 251;
				Match(COMMA);
				State = 252;
				varName();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Struct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_nameContext struct_name() {
		Struct_nameContext _localctx = new Struct_nameContext(Context, State);
		EnterRule(_localctx, 32, RULE_struct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_STRUCT() { return GetToken(GrammarParser.KYW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_nameContext struct_name() {
			return GetRuleContext<Struct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public Struct_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_dcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_dclContext struct_dcl() {
		Struct_dclContext _localctx = new Struct_dclContext(Context, State);
		EnterRule(_localctx, 34, RULE_struct_dcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 260;
				tags();
				}
			}

			State = 263;
			Match(KYW_STRUCT);
			State = 264;
			struct_name();
			State = 265;
			Match(BODY_OPN);
			State = 266;
			struct_body();
			State = 267;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext[] func_dcl() {
			return GetRuleContexts<Func_dclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext func_dcl(int i) {
			return GetRuleContext<Func_dclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext[] field_dcl() {
			return GetRuleContexts<Field_dclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext field_dcl(int i) {
			return GetRuleContext<Field_dclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG || _la==ID) {
				{
				State = 273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 269;
					func_dcl();
					}
					break;
				case 2:
					{
					{
					State = 270;
					field_dcl();
					State = 271;
					Match(EOS);
					}
					}
					break;
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_CLASS() { return GetToken(GrammarParser.KYW_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC() { return GetToken(GrammarParser.OP_ACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parent_classContext parent_class() {
			return GetRuleContext<Parent_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_IMPLEMENTS() { return GetToken(GrammarParser.KYW_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesContext interfaces() {
			return GetRuleContext<InterfacesContext>(0);
		}
		public Class_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClass_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClass_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_dcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_dclContext class_dcl() {
		Class_dclContext _localctx = new Class_dclContext(Context, State);
		EnterRule(_localctx, 40, RULE_class_dcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 280;
				tags();
				}
			}

			State = 283;
			Match(KYW_CLASS);
			State = 284;
			class_name();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ACC) {
				{
				State = 285;
				Match(OP_ACC);
				State = 286;
				parent_class();
				}
			}

			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KYW_IMPLEMENTS) {
				{
				State = 289;
				Match(KYW_IMPLEMENTS);
				State = 290;
				interfaces();
				}
			}

			State = 293;
			Match(BODY_OPN);
			State = 294;
			class_body();
			State = 295;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Parent_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParent_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParent_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent_class(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parent_classContext parent_class() {
		Parent_classContext _localctx = new Parent_classContext(Context, State);
		EnterRule(_localctx, 42, RULE_parent_class);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 44, RULE_interface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public InterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesContext interfaces() {
		InterfacesContext _localctx = new InterfacesContext(Context, State);
		EnterRule(_localctx, 46, RULE_interfaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			@interface();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 302;
				Match(COMMA);
				State = 303;
				@interface();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext[] func_dcl() {
			return GetRuleContexts<Func_dclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_dclContext func_dcl(int i) {
			return GetRuleContext<Func_dclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext[] field_dcl() {
			return GetRuleContexts<Field_dclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_dclContext field_dcl(int i) {
			return GetRuleContext<Field_dclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG || _la==ID) {
				{
				State = 313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 309;
					func_dcl();
					}
					break;
				case 2:
					{
					{
					State = 310;
					field_dcl();
					State = 311;
					Match(EOS);
					}
					}
					break;
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCodeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCodeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBodyContext codeBody() {
		CodeBodyContext _localctx = new CodeBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_codeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(BODY_OPN);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576161684595540512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				{
				State = 319;
				statement();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_statement);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				varDcl();
				State = 328;
				Match(EOS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				expression(0);
				State = 331;
				Match(EOS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 333;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 334;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 335;
				whileLoop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 336;
				breakStatement();
				State = 337;
				Match(EOS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 339;
				continueStatement();
				State = 340;
				Match(EOS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 342;
				returnStatement();
				State = 343;
				Match(EOS);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 345;
				tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(GrammarParser.OP_ASG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 54, RULE_varDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			type();
			State = 349;
			varName();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASG) {
				{
				State = 350;
				Match(OP_ASG);
				State = 351;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpContext primaryExp() {
			return GetRuleContext<PrimaryExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_MultLvlContext op_MultLvl() {
			return GetRuleContext<Op_MultLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_AddLvlContext op_AddLvl() {
			return GetRuleContext<Op_AddLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_BitLvlContext op_BitLvl() {
			return GetRuleContext<Op_BitLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_CompLvlContext op_CompLvl() {
			return GetRuleContext<Op_CompLvlContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 355;
			primaryExp();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 375;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 373;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 357;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 358;
						op_MultLvl();
						State = 359;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 361;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 362;
						op_AddLvl();
						State = 363;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 365;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 366;
						op_BitLvl();
						State = 367;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 369;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 370;
						op_CompLvl();
						State = 371;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 377;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Op_MultLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_STAR() { return GetToken(GrammarParser.OP_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(GrammarParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REM() { return GetToken(GrammarParser.OP_REM, 0); }
		public Op_MultLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_MultLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOp_MultLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOp_MultLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_MultLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_MultLvlContext op_MultLvl() {
		Op_MultLvlContext _localctx = new Op_MultLvlContext(Context, State);
		EnterRule(_localctx, 58, RULE_op_MultLvl);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_TRUE:
			case KYW_FALSE:
			case KYW_NULL:
			case KYW_FREE:
			case KYW_ALLOC:
			case UNOP_INC:
			case UNOP_DCR:
			case LUNOP_L_NOT:
			case LUNOP_B_NOT:
			case LUNOP_SIZEOF:
			case OP_AND:
			case OP_REF:
			case PARN_OPN:
			case SIGN:
			case INT_STR:
			case HEX_STR:
			case OCT_STR:
			case BIN_STR:
			case CHAR:
			case STRING:
			case ID:
			case PPC_ID:
			case PPC_DEEP_ID:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OP_STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379;
				Match(OP_STAR);
				}
				break;
			case OP_DIV:
				EnterOuterAlt(_localctx, 3);
				{
				State = 380;
				Match(OP_DIV);
				}
				break;
			case OP_REM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 381;
				Match(OP_REM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_AddLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(GrammarParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(GrammarParser.OP_SUB, 0); }
		public Op_AddLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_AddLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOp_AddLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOp_AddLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_AddLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_AddLvlContext op_AddLvl() {
		Op_AddLvlContext _localctx = new Op_AddLvlContext(Context, State);
		EnterRule(_localctx, 60, RULE_op_AddLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_BitLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(GrammarParser.OP_B_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_XOR() { return GetToken(GrammarParser.OP_B_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSH() { return GetToken(GrammarParser.OP_LSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSH() { return GetToken(GrammarParser.OP_RSH, 0); }
		public Op_BitLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_BitLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOp_BitLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOp_BitLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_BitLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_BitLvlContext op_BitLvl() {
		Op_BitLvlContext _localctx = new Op_BitLvlContext(Context, State);
		EnterRule(_localctx, 62, RULE_op_BitLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16642998272L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_CompLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQL() { return GetToken(GrammarParser.OP_EQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEQ() { return GetToken(GrammarParser.OP_NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(GrammarParser.OP_B_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREQ() { return GetToken(GrammarParser.OP_GREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSEQ() { return GetToken(GrammarParser.OP_LSEQ, 0); }
		public Op_CompLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_CompLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOp_CompLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOp_CompLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_CompLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_CompLvlContext op_CompLvl() {
		Op_CompLvlContext _localctx = new Op_CompLvlContext(Context, State);
		EnterRule(_localctx, 64, RULE_op_CompLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4279398039552L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpValContext primaryExpVal() {
			return GetRuleContext<PrimaryExpValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_rUnContext op_rUn() {
			return GetRuleContext<Op_rUnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_lUnContext op_lUn() {
			return GetRuleContext<Op_lUnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscPrimeExpContext miscPrimeExp() {
			return GetRuleContext<MiscPrimeExpContext>(0);
		}
		public PrimaryExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpContext primaryExp() {
		PrimaryExpContext _localctx = new PrimaryExpContext(Context, State);
		EnterRule(_localctx, 66, RULE_primaryExp);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				primaryExpVal();
				State = 392;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 391;
					op_rUn();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				op_lUn();
				State = 395;
				primaryExpVal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397;
				miscPrimeExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_lUnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_DCR() { return GetToken(GrammarParser.UNOP_DCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_INC() { return GetToken(GrammarParser.UNOP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_B_NOT() { return GetToken(GrammarParser.LUNOP_B_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_L_NOT() { return GetToken(GrammarParser.LUNOP_L_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_SIZEOF() { return GetToken(GrammarParser.LUNOP_SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitCastContext explicitCast() {
			return GetRuleContext<ExplicitCastContext>(0);
		}
		public Op_lUnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lUn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOp_lUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOp_lUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lUn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_lUnContext op_lUn() {
		Op_lUnContext _localctx = new Op_lUnContext(Context, State);
		EnterRule(_localctx, 68, RULE_op_lUn);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNOP_DCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				Match(UNOP_DCR);
				}
				break;
			case UNOP_INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				Match(UNOP_INC);
				}
				break;
			case LUNOP_B_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				Match(LUNOP_B_NOT);
				}
				break;
			case LUNOP_L_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				Match(LUNOP_L_NOT);
				}
				break;
			case LUNOP_SIZEOF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404;
				Match(LUNOP_SIZEOF);
				}
				break;
			case OP_AND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 405;
				Match(OP_AND);
				}
				break;
			case PARN_OPN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 406;
				explicitCast();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_rUnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_DCR() { return GetToken(GrammarParser.UNOP_DCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_INC() { return GetToken(GrammarParser.UNOP_INC, 0); }
		public Op_rUnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_rUn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOp_rUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOp_rUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_rUn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_rUnContext op_rUn() {
		Op_rUnContext _localctx = new Op_rUnContext(Context, State);
		EnterRule(_localctx, 70, RULE_op_rUn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			_la = TokenStream.LA(1);
			if ( !(_la==UNOP_INC || _la==UNOP_DCR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthsExpContext parenthsExp() {
			return GetRuleContext<ParenthsExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpContext literalExp() {
			return GetRuleContext<LiteralExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__funcCallContext ppc__funcCall() {
			return GetRuleContext<Ppc__funcCallContext>(0);
		}
		public PrimaryExpValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExpVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExpVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpValContext primaryExpVal() {
		PrimaryExpValContext _localctx = new PrimaryExpValContext(Context, State);
		EnterRule(_localctx, 72, RULE_primaryExpVal);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411;
				parenthsExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				funcCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 413;
				literalExp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 414;
				ppc__funcCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthsExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		public ParenthsExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthsExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParenthsExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParenthsExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthsExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthsExpContext parenthsExp() {
		ParenthsExpContext _localctx = new ParenthsExpContext(Context, State);
		EnterRule(_localctx, 74, RULE_parenthsExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(PARN_OPN);
			State = 418;
			expression(0);
			State = 419;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscPrimeExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocContext alloc() {
			return GetRuleContext<AllocContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeContext free() {
			return GetRuleContext<FreeContext>(0);
		}
		public MiscPrimeExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_miscPrimeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMiscPrimeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMiscPrimeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMiscPrimeExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MiscPrimeExpContext miscPrimeExp() {
		MiscPrimeExpContext _localctx = new MiscPrimeExpContext(Context, State);
		EnterRule(_localctx, 76, RULE_miscPrimeExp);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421;
				assignment();
				}
				break;
			case KYW_ALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				alloc();
				}
				break;
			case KYW_FREE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423;
				free();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_ALLOC() { return GetToken(GrammarParser.KYW_ALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AllocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alloc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlloc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocContext alloc() {
		AllocContext _localctx = new AllocContext(Context, State);
		EnterRule(_localctx, 78, RULE_alloc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(KYW_ALLOC);
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 427;
				expression(0);
				}
				break;
			case 2:
				{
				State = 428;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FREE() { return GetToken(GrammarParser.KYW_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public FreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_free; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeContext free() {
		FreeContext _localctx = new FreeContext(Context, State);
		EnterRule(_localctx, 80, RULE_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(KYW_FREE);
			State = 432;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		public ExplicitCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExplicitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExplicitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCastContext explicitCast() {
		ExplicitCastContext _localctx = new ExplicitCastContext(Context, State);
		EnterRule(_localctx, 82, RULE_explicitCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(PARN_OPN);
			State = 435;
			type();
			State = 436;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(GrammarParser.OP_ASG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			varRef();
			State = 439;
			Match(OP_ASG);
			State = 440;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncRefContext funcRef() {
			return GetRuleContext<FuncRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 86, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			funcRef();
			State = 443;
			Match(PARN_OPN);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576161684595572512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				State = 444;
				funcParamVals();
				}
			}

			State = 447;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamValsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public FuncParamValsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParamVals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncParamVals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncParamVals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParamVals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamValsContext funcParamVals() {
		FuncParamValsContext _localctx = new FuncParamValsContext(Context, State);
		EnterRule(_localctx, 88, RULE_funcParamVals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			expression(0);
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 450;
				Match(COMMA);
				State = 451;
				expression(0);
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public FuncRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncRefContext funcRef() {
		FuncRefContext _localctx = new FuncRefContext(Context, State);
		EnterRule(_localctx, 90, RULE_funcRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__varRefContext ppc__varRef() {
			return GetRuleContext<Ppc__varRefContext>(0);
		}
		public LiteralExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpContext literalExp() {
		LiteralExpContext _localctx = new LiteralExpContext(Context, State);
		EnterRule(_localctx, 92, RULE_literalExp);
		try {
			State = 466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				nullLiteral();
				}
				break;
			case OP_REF:
			case SIGN:
			case INT_STR:
			case HEX_STR:
			case OCT_STR:
			case BIN_STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				numLiteral();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461;
				strLiteral();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				charLiteral();
				}
				break;
			case KYW_TRUE:
			case KYW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 463;
				boolLiteral();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 464;
				varRef();
				}
				break;
			case PPC_ID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 465;
				ppc__varRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_NULL() { return GetToken(GrammarParser.KYW_NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(KYW_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_numLiteral);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471;
				floatLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntDecLiteralContext intDecLiteral() {
			return GetRuleContext<IntDecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntHexLiteralContext intHexLiteral() {
			return GetRuleContext<IntHexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntBinLiteralContext intBinLiteral() {
			return GetRuleContext<IntBinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntOctLiteralContext intOctLiteral() {
			return GetRuleContext<IntOctLiteralContext>(0);
		}
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_intLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 474;
				intDecLiteral();
				}
				break;
			case 2:
				{
				State = 475;
				intHexLiteral();
				}
				break;
			case 3:
				{
				State = 476;
				intBinLiteral();
				}
				break;
			case 4:
				{
				State = 477;
				intOctLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntDecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_STR() { return GetToken(GrammarParser.INT_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(GrammarParser.SIGN, 0); }
		public IntDecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intDecLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntDecLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntDecLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDecLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntDecLiteralContext intDecLiteral() {
		IntDecLiteralContext _localctx = new IntDecLiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_intDecLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIGN) {
				{
				State = 480;
				Match(SIGN);
				}
			}

			State = 483;
			Match(INT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntHexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_STR() { return GetToken(GrammarParser.HEX_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(GrammarParser.SIGN, 0); }
		public IntHexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intHexLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntHexLiteralContext intHexLiteral() {
		IntHexLiteralContext _localctx = new IntHexLiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_intHexLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIGN) {
				{
				State = 485;
				Match(SIGN);
				}
			}

			State = 488;
			Match(HEX_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntBinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_STR() { return GetToken(GrammarParser.BIN_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(GrammarParser.SIGN, 0); }
		public IntBinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intBinLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntBinLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntBinLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntBinLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntBinLiteralContext intBinLiteral() {
		IntBinLiteralContext _localctx = new IntBinLiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_intBinLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIGN) {
				{
				State = 490;
				Match(SIGN);
				}
			}

			State = 493;
			Match(BIN_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntOctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_STR() { return GetToken(GrammarParser.OCT_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(GrammarParser.SIGN, 0); }
		public IntOctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intOctLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntOctLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntOctLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntOctLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntOctLiteralContext intOctLiteral() {
		IntOctLiteralContext _localctx = new IntOctLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_intOctLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIGN) {
				{
				State = 495;
				Match(SIGN);
				}
			}

			State = 498;
			Match(OCT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(GrammarParser.OP_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_STR() { return GetTokens(GrammarParser.INT_STR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_STR(int i) {
			return GetToken(GrammarParser.INT_STR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(GrammarParser.SIGN, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIGN) {
				{
				State = 500;
				Match(SIGN);
				}
			}

			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_STR) {
				{
				State = 503;
				Match(INT_STR);
				}
			}

			State = 506;
			Match(OP_REF);
			State = 507;
			Match(INT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStrLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStrLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(GrammarParser.CHAR, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_TRUE() { return GetToken(GrammarParser.KYW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FALSE() { return GetToken(GrammarParser.KYW_FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_la = TokenStream.LA(1);
			if ( !(_la==KYW_TRUE || _la==KYW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_ACC() { return GetTokens(GrammarParser.OP_ACC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC(int i) {
			return GetToken(GrammarParser.OP_ACC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_REF() { return GetTokens(GrammarParser.OP_REF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF(int i) {
			return GetToken(GrammarParser.OP_REF, i);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 116, RULE_varRef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(ID);
			State = 520;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 516;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ACC || _la==OP_REF) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 517;
					Match(ID);
					}
					} 
				}
				State = 522;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_IF() { return GetToken(GrammarParser.KYW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			Match(KYW_IF);
			State = 524;
			Match(PARN_OPN);
			State = 525;
			expression(0);
			State = 526;
			Match(PARN_CLS);
			State = 527;
			codeBody();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KYW_ELSE) {
				{
				State = 528;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_ELSE() { return GetToken(GrammarParser.KYW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(KYW_ELSE);
			State = 534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_IF:
				{
				State = 532;
				ifStatement();
				}
				break;
			case BODY_OPN:
				{
				State = 533;
				codeBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_RETURN() { return GetToken(GrammarParser.KYW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(KYW_RETURN);
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576161684595572512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				State = 537;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_CONTINUE() { return GetToken(GrammarParser.KYW_CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(KYW_CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_BREAK() { return GetToken(GrammarParser.KYW_BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(KYW_BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public LoopDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLoopDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLoopDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopDeclContext loopDecl() {
		LoopDeclContext _localctx = new LoopDeclContext(Context, State);
		EnterRule(_localctx, 128, RULE_loopDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLoopCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLoopCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopCondContext loopCond() {
		LoopCondContext _localctx = new LoopCondContext(Context, State);
		EnterRule(_localctx, 130, RULE_loopCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEndExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEndExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpContext endExp() {
		EndExpContext _localctx = new EndExpContext(Context, State);
		EnterRule(_localctx, 132, RULE_endExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FOR() { return GetToken(GrammarParser.KYW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopDeclContext loopDecl() {
			return GetRuleContext<LoopDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopCondContext loopCond() {
			return GetRuleContext<LoopCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpContext endExp() {
			return GetRuleContext<EndExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 134, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(KYW_FOR);
			State = 551;
			Match(PARN_OPN);
			State = 552;
			loopDecl();
			State = 553;
			Match(EOS);
			State = 554;
			loopCond();
			State = 555;
			Match(EOS);
			State = 556;
			endExp();
			State = 557;
			Match(PARN_CLS);
			State = 558;
			codeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_WHILE() { return GetToken(GrammarParser.KYW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopCondContext loopCond() {
			return GetRuleContext<LoopCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 136, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(KYW_WHILE);
			State = 561;
			Match(PARN_OPN);
			State = 562;
			loopCond();
			State = 563;
			Match(PARN_CLS);
			State = 564;
			codeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_Code_BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_C_CODE() { return GetToken(GrammarParser.PPC_C_CODE, 0); }
		public Ppc__C_Code_BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Code_Body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Code_Body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Code_Body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Code_Body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_Code_BodyContext ppc__C_Code_Body() {
		Ppc__C_Code_BodyContext _localctx = new Ppc__C_Code_BodyContext(Context, State);
		EnterRule(_localctx, 138, RULE_ppc__C_Code_Body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(PPC_C_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Ppc__C_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_idContext ppc__C_id() {
		Ppc__C_idContext _localctx = new Ppc__C_idContext(Context, State);
		EnterRule(_localctx, 140, RULE_ppc__C_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_idContext ppc__C_id() {
			return GetRuleContext<Ppc__C_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public Ppc__C_FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_FuncContext ppc__C_Func() {
		Ppc__C_FuncContext _localctx = new Ppc__C_FuncContext(Context, State);
		EnterRule(_localctx, 142, RULE_ppc__C_Func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ppc__C_id();
			State = 571;
			Match(PARN_OPN);
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576161684595572512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				State = 572;
				funcParamVals();
				}
			}

			State = 575;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_Func_MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_C_LAMDA() { return GetToken(GrammarParser.PPC_C_LAMDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_FuncContext ppc__C_Func() {
			return GetRuleContext<Ppc__C_FuncContext>(0);
		}
		public Ppc__C_Func_MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Func_Map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Func_Map(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Func_Map(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Func_Map(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_Func_MapContext ppc__C_Func_Map() {
		Ppc__C_Func_MapContext _localctx = new Ppc__C_Func_MapContext(Context, State);
		EnterRule(_localctx, 144, RULE_ppc__C_Func_Map);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(PPC_C_LAMDA);
			State = 578;
			ppc__C_Func();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__varRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_ID() { return GetToken(GrammarParser.PPC_ID, 0); }
		public Ppc__varRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__varRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__varRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__varRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__varRefContext ppc__varRef() {
		Ppc__varRefContext _localctx = new Ppc__varRefContext(Context, State);
		EnterRule(_localctx, 146, RULE_ppc__varRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(PPC_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__funcRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_ID() { return GetToken(GrammarParser.PPC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_DEEP_ID() { return GetToken(GrammarParser.PPC_DEEP_ID, 0); }
		public Ppc__funcRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__funcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__funcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__funcRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__funcRefContext ppc__funcRef() {
		Ppc__funcRefContext _localctx = new Ppc__funcRefContext(Context, State);
		EnterRule(_localctx, 148, RULE_ppc__funcRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_la = TokenStream.LA(1);
			if ( !(_la==PPC_ID || _la==PPC_DEEP_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__funcCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__funcRefContext ppc__funcRef() {
			return GetRuleContext<Ppc__funcRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public Ppc__funcCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__funcCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__funcCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__funcCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__funcCallContext ppc__funcCall() {
		Ppc__funcCallContext _localctx = new Ppc__funcCallContext(Context, State);
		EnterRule(_localctx, 150, RULE_ppc__funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			ppc__funcRef();
			State = 585;
			Match(PARN_OPN);
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576161684595572512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				State = 586;
				funcParamVals();
				}
			}

			State = 589;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC() { return GetToken(GrammarParser.OP_ACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(GrammarParser.OP_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQPN_OPN() { return GetToken(GrammarParser.SQPN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQPN_CLS() { return GetToken(GrammarParser.SQPN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public Ppc__TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__Token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__Token(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__Token(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__Token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__TokenContext ppc__Token() {
		Ppc__TokenContext _localctx = new Ppc__TokenContext(Context, State);
		EnterRule(_localctx, 152, RULE_ppc__Token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & 343605298689L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,73,594,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,5,0,156,
		8,0,10,0,12,0,159,9,0,1,0,1,0,1,1,4,1,164,8,1,11,1,12,1,165,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,178,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
		5,4,187,8,4,10,4,12,4,190,9,4,1,4,1,4,1,5,1,5,1,5,1,6,4,6,198,8,6,11,6,
		12,6,199,1,7,1,7,3,7,204,8,7,1,8,3,8,207,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,
		8,215,8,8,10,8,12,8,218,9,8,3,8,220,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,3,9,233,8,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,
		1,13,1,14,1,14,1,15,3,15,248,8,15,1,15,1,15,1,15,1,15,5,15,254,8,15,10,
		15,12,15,257,9,15,1,16,1,16,1,17,3,17,262,8,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,18,1,18,1,18,1,18,5,18,274,8,18,10,18,12,18,277,9,18,1,19,1,19,
		1,20,3,20,282,8,20,1,20,1,20,1,20,1,20,3,20,288,8,20,1,20,1,20,3,20,292,
		8,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,5,23,305,8,
		23,10,23,12,23,308,9,23,1,24,1,24,1,24,1,24,5,24,314,8,24,10,24,12,24,
		317,9,24,1,25,1,25,5,25,321,8,25,10,25,12,25,324,9,25,1,25,1,25,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,3,26,347,8,26,1,27,1,27,1,27,1,27,3,27,353,8,27,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,5,28,374,8,28,10,28,12,28,377,9,28,1,29,1,29,1,29,
		1,29,3,29,383,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,3,33,393,8,
		33,1,33,1,33,1,33,1,33,3,33,399,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		3,34,408,8,34,1,35,1,35,1,36,1,36,1,36,1,36,3,36,416,8,36,1,37,1,37,1,
		37,1,37,1,38,1,38,1,38,3,38,425,8,38,1,39,1,39,1,39,3,39,430,8,39,1,40,
		1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,
		446,8,43,1,43,1,43,1,44,1,44,1,44,5,44,453,8,44,10,44,12,44,456,9,44,1,
		45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,467,8,46,1,47,1,47,1,48,
		1,48,3,48,473,8,48,1,49,1,49,1,49,1,49,3,49,479,8,49,1,50,3,50,482,8,50,
		1,50,1,50,1,51,3,51,487,8,51,1,51,1,51,1,52,3,52,492,8,52,1,52,1,52,1,
		53,3,53,497,8,53,1,53,1,53,1,54,3,54,502,8,54,1,54,3,54,505,8,54,1,54,
		1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,5,58,519,8,58,10,
		58,12,58,522,9,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,530,8,59,1,60,1,60,
		1,60,3,60,535,8,60,1,61,1,61,3,61,539,8,61,1,62,1,62,1,63,1,63,1,64,1,
		64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
		67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,71,3,
		71,574,8,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,
		3,75,588,8,75,1,75,1,75,1,76,1,76,1,76,0,1,56,77,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,0,8,1,0,27,28,1,0,29,33,3,0,29,30,34,34,37,41,1,0,18,19,
		1,0,5,6,1,0,43,44,1,0,68,69,6,0,29,29,38,39,43,44,48,51,65,65,67,67,599,
		0,157,1,0,0,0,2,163,1,0,0,0,4,177,1,0,0,0,6,179,1,0,0,0,8,182,1,0,0,0,
		10,193,1,0,0,0,12,197,1,0,0,0,14,201,1,0,0,0,16,206,1,0,0,0,18,223,1,0,
		0,0,20,234,1,0,0,0,22,237,1,0,0,0,24,239,1,0,0,0,26,242,1,0,0,0,28,244,
		1,0,0,0,30,247,1,0,0,0,32,258,1,0,0,0,34,261,1,0,0,0,36,275,1,0,0,0,38,
		278,1,0,0,0,40,281,1,0,0,0,42,297,1,0,0,0,44,299,1,0,0,0,46,301,1,0,0,
		0,48,315,1,0,0,0,50,318,1,0,0,0,52,346,1,0,0,0,54,348,1,0,0,0,56,354,1,
		0,0,0,58,382,1,0,0,0,60,384,1,0,0,0,62,386,1,0,0,0,64,388,1,0,0,0,66,398,
		1,0,0,0,68,407,1,0,0,0,70,409,1,0,0,0,72,415,1,0,0,0,74,417,1,0,0,0,76,
		424,1,0,0,0,78,426,1,0,0,0,80,431,1,0,0,0,82,434,1,0,0,0,84,438,1,0,0,
		0,86,442,1,0,0,0,88,449,1,0,0,0,90,457,1,0,0,0,92,466,1,0,0,0,94,468,1,
		0,0,0,96,472,1,0,0,0,98,478,1,0,0,0,100,481,1,0,0,0,102,486,1,0,0,0,104,
		491,1,0,0,0,106,496,1,0,0,0,108,501,1,0,0,0,110,509,1,0,0,0,112,511,1,
		0,0,0,114,513,1,0,0,0,116,515,1,0,0,0,118,523,1,0,0,0,120,531,1,0,0,0,
		122,536,1,0,0,0,124,540,1,0,0,0,126,542,1,0,0,0,128,544,1,0,0,0,130,546,
		1,0,0,0,132,548,1,0,0,0,134,550,1,0,0,0,136,560,1,0,0,0,138,566,1,0,0,
		0,140,568,1,0,0,0,142,570,1,0,0,0,144,577,1,0,0,0,146,580,1,0,0,0,148,
		582,1,0,0,0,150,584,1,0,0,0,152,591,1,0,0,0,154,156,3,4,2,0,155,154,1,
		0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,
		159,157,1,0,0,0,160,161,5,0,0,1,161,1,1,0,0,0,162,164,5,66,0,0,163,162,
		1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,3,1,0,0,0,
		167,178,3,6,3,0,168,169,3,2,1,0,169,170,5,58,0,0,170,178,1,0,0,0,171,172,
		3,30,15,0,172,173,5,58,0,0,173,178,1,0,0,0,174,178,3,18,9,0,175,178,3,
		34,17,0,176,178,3,40,20,0,177,167,1,0,0,0,177,168,1,0,0,0,177,171,1,0,
		0,0,177,174,1,0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,5,1,0,0,0,179,
		180,3,10,5,0,180,181,5,58,0,0,181,7,1,0,0,0,182,183,5,38,0,0,183,188,5,
		67,0,0,184,185,5,25,0,0,185,187,5,67,0,0,186,184,1,0,0,0,187,190,1,0,0,
		0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,
		192,5,39,0,0,192,9,1,0,0,0,193,194,5,1,0,0,194,195,3,8,4,0,195,11,1,0,
		0,0,196,198,5,24,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,
		200,1,0,0,0,200,13,1,0,0,0,201,203,5,67,0,0,202,204,3,12,6,0,203,202,1,
		0,0,0,203,204,1,0,0,0,204,15,1,0,0,0,205,207,3,2,1,0,206,205,1,0,0,0,206,
		207,1,0,0,0,207,208,1,0,0,0,208,209,3,22,11,0,209,210,3,26,13,0,210,219,
		5,48,0,0,211,216,3,24,12,0,212,213,5,45,0,0,213,215,3,24,12,0,214,212,
		1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,220,1,0,0,
		0,218,216,1,0,0,0,219,211,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,
		222,5,49,0,0,222,17,1,0,0,0,223,232,3,16,8,0,224,233,3,50,25,0,225,226,
		3,20,10,0,226,227,5,58,0,0,227,233,1,0,0,0,228,233,3,138,69,0,229,230,
		3,144,72,0,230,231,5,58,0,0,231,233,1,0,0,0,232,224,1,0,0,0,232,225,1,
		0,0,0,232,228,1,0,0,0,232,229,1,0,0,0,233,19,1,0,0,0,234,235,5,42,0,0,
		235,236,3,56,28,0,236,21,1,0,0,0,237,238,3,14,7,0,238,23,1,0,0,0,239,240,
		3,14,7,0,240,241,5,67,0,0,241,25,1,0,0,0,242,243,5,67,0,0,243,27,1,0,0,
		0,244,245,5,67,0,0,245,29,1,0,0,0,246,248,3,2,1,0,247,246,1,0,0,0,247,
		248,1,0,0,0,248,249,1,0,0,0,249,250,3,14,7,0,250,255,3,28,14,0,251,252,
		5,45,0,0,252,254,3,28,14,0,253,251,1,0,0,0,254,257,1,0,0,0,255,253,1,0,
		0,0,255,256,1,0,0,0,256,31,1,0,0,0,257,255,1,0,0,0,258,259,5,67,0,0,259,
		33,1,0,0,0,260,262,3,2,1,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,
		0,0,263,264,5,2,0,0,264,265,3,32,16,0,265,266,5,46,0,0,266,267,3,36,18,
		0,267,268,5,47,0,0,268,35,1,0,0,0,269,274,3,18,9,0,270,271,3,30,15,0,271,
		272,5,58,0,0,272,274,1,0,0,0,273,269,1,0,0,0,273,270,1,0,0,0,274,277,1,
		0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,37,1,0,0,0,277,275,1,0,0,0,278,
		279,5,67,0,0,279,39,1,0,0,0,280,282,3,2,1,0,281,280,1,0,0,0,281,282,1,
		0,0,0,282,283,1,0,0,0,283,284,5,3,0,0,284,287,3,38,19,0,285,286,5,43,0,
		0,286,288,3,42,21,0,287,285,1,0,0,0,287,288,1,0,0,0,288,291,1,0,0,0,289,
		290,5,4,0,0,290,292,3,46,23,0,291,289,1,0,0,0,291,292,1,0,0,0,292,293,
		1,0,0,0,293,294,5,46,0,0,294,295,3,48,24,0,295,296,5,47,0,0,296,41,1,0,
		0,0,297,298,5,67,0,0,298,43,1,0,0,0,299,300,5,67,0,0,300,45,1,0,0,0,301,
		306,3,44,22,0,302,303,5,45,0,0,303,305,3,44,22,0,304,302,1,0,0,0,305,308,
		1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,47,1,0,0,0,308,306,1,0,0,0,
		309,314,3,18,9,0,310,311,3,30,15,0,311,312,5,58,0,0,312,314,1,0,0,0,313,
		309,1,0,0,0,313,310,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,
		0,0,0,316,49,1,0,0,0,317,315,1,0,0,0,318,322,5,46,0,0,319,321,3,52,26,
		0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,
		325,1,0,0,0,324,322,1,0,0,0,325,326,5,47,0,0,326,51,1,0,0,0,327,328,3,
		54,27,0,328,329,5,58,0,0,329,347,1,0,0,0,330,331,3,56,28,0,331,332,5,58,
		0,0,332,347,1,0,0,0,333,347,3,118,59,0,334,347,3,134,67,0,335,347,3,136,
		68,0,336,337,3,126,63,0,337,338,5,58,0,0,338,347,1,0,0,0,339,340,3,124,
		62,0,340,341,5,58,0,0,341,347,1,0,0,0,342,343,3,122,61,0,343,344,5,58,
		0,0,344,347,1,0,0,0,345,347,3,2,1,0,346,327,1,0,0,0,346,330,1,0,0,0,346,
		333,1,0,0,0,346,334,1,0,0,0,346,335,1,0,0,0,346,336,1,0,0,0,346,339,1,
		0,0,0,346,342,1,0,0,0,346,345,1,0,0,0,347,53,1,0,0,0,348,349,3,14,7,0,
		349,352,3,28,14,0,350,351,5,23,0,0,351,353,3,56,28,0,352,350,1,0,0,0,352,
		353,1,0,0,0,353,55,1,0,0,0,354,355,6,28,-1,0,355,356,3,66,33,0,356,375,
		1,0,0,0,357,358,10,4,0,0,358,359,3,58,29,0,359,360,3,56,28,5,360,374,1,
		0,0,0,361,362,10,3,0,0,362,363,3,60,30,0,363,364,3,56,28,4,364,374,1,0,
		0,0,365,366,10,2,0,0,366,367,3,62,31,0,367,368,3,56,28,3,368,374,1,0,0,
		0,369,370,10,1,0,0,370,371,3,64,32,0,371,372,3,56,28,2,372,374,1,0,0,0,
		373,357,1,0,0,0,373,361,1,0,0,0,373,365,1,0,0,0,373,369,1,0,0,0,374,377,
		1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,57,1,0,0,0,377,375,1,0,0,0,
		378,383,1,0,0,0,379,383,5,24,0,0,380,383,5,25,0,0,381,383,5,26,0,0,382,
		378,1,0,0,0,382,379,1,0,0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,59,1,0,
		0,0,384,385,7,0,0,0,385,61,1,0,0,0,386,387,7,1,0,0,387,63,1,0,0,0,388,
		389,7,2,0,0,389,65,1,0,0,0,390,392,3,72,36,0,391,393,3,70,35,0,392,391,
		1,0,0,0,392,393,1,0,0,0,393,399,1,0,0,0,394,395,3,68,34,0,395,396,3,72,
		36,0,396,399,1,0,0,0,397,399,3,76,38,0,398,390,1,0,0,0,398,394,1,0,0,0,
		398,397,1,0,0,0,399,67,1,0,0,0,400,408,5,19,0,0,401,408,5,18,0,0,402,408,
		5,21,0,0,403,408,5,20,0,0,404,408,5,22,0,0,405,408,5,29,0,0,406,408,3,
		82,41,0,407,400,1,0,0,0,407,401,1,0,0,0,407,402,1,0,0,0,407,403,1,0,0,
		0,407,404,1,0,0,0,407,405,1,0,0,0,407,406,1,0,0,0,408,69,1,0,0,0,409,410,
		7,3,0,0,410,71,1,0,0,0,411,416,3,74,37,0,412,416,3,86,43,0,413,416,3,92,
		46,0,414,416,3,150,75,0,415,411,1,0,0,0,415,412,1,0,0,0,415,413,1,0,0,
		0,415,414,1,0,0,0,416,73,1,0,0,0,417,418,5,48,0,0,418,419,3,56,28,0,419,
		420,5,49,0,0,420,75,1,0,0,0,421,425,3,84,42,0,422,425,3,78,39,0,423,425,
		3,80,40,0,424,421,1,0,0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,77,1,0,0,
		0,426,429,5,16,0,0,427,430,3,56,28,0,428,430,3,14,7,0,429,427,1,0,0,0,
		429,428,1,0,0,0,430,79,1,0,0,0,431,432,5,15,0,0,432,433,3,116,58,0,433,
		81,1,0,0,0,434,435,5,48,0,0,435,436,3,14,7,0,436,437,5,49,0,0,437,83,1,
		0,0,0,438,439,3,116,58,0,439,440,5,23,0,0,440,441,3,56,28,0,441,85,1,0,
		0,0,442,443,3,90,45,0,443,445,5,48,0,0,444,446,3,88,44,0,445,444,1,0,0,
		0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,5,49,0,0,448,87,1,0,0,0,449,
		454,3,56,28,0,450,451,5,45,0,0,451,453,3,56,28,0,452,450,1,0,0,0,453,456,
		1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,89,1,0,0,0,456,454,1,0,0,0,
		457,458,3,116,58,0,458,91,1,0,0,0,459,467,3,94,47,0,460,467,3,96,48,0,
		461,467,3,110,55,0,462,467,3,112,56,0,463,467,3,114,57,0,464,467,3,116,
		58,0,465,467,3,146,73,0,466,459,1,0,0,0,466,460,1,0,0,0,466,461,1,0,0,
		0,466,462,1,0,0,0,466,463,1,0,0,0,466,464,1,0,0,0,466,465,1,0,0,0,467,
		93,1,0,0,0,468,469,5,7,0,0,469,95,1,0,0,0,470,473,3,98,49,0,471,473,3,
		108,54,0,472,470,1,0,0,0,472,471,1,0,0,0,473,97,1,0,0,0,474,479,3,100,
		50,0,475,479,3,102,51,0,476,479,3,104,52,0,477,479,3,106,53,0,478,474,
		1,0,0,0,478,475,1,0,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,99,1,0,0,0,
		480,482,5,59,0,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,
		5,60,0,0,484,101,1,0,0,0,485,487,5,59,0,0,486,485,1,0,0,0,486,487,1,0,
		0,0,487,488,1,0,0,0,488,489,5,61,0,0,489,103,1,0,0,0,490,492,5,59,0,0,
		491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,494,5,63,0,0,494,105,
		1,0,0,0,495,497,5,59,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,
		0,498,499,5,62,0,0,499,107,1,0,0,0,500,502,5,59,0,0,501,500,1,0,0,0,501,
		502,1,0,0,0,502,504,1,0,0,0,503,505,5,60,0,0,504,503,1,0,0,0,504,505,1,
		0,0,0,505,506,1,0,0,0,506,507,5,44,0,0,507,508,5,60,0,0,508,109,1,0,0,
		0,509,510,5,65,0,0,510,111,1,0,0,0,511,512,5,64,0,0,512,113,1,0,0,0,513,
		514,7,4,0,0,514,115,1,0,0,0,515,520,5,67,0,0,516,517,7,5,0,0,517,519,5,
		67,0,0,518,516,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,
		521,117,1,0,0,0,522,520,1,0,0,0,523,524,5,8,0,0,524,525,5,48,0,0,525,526,
		3,56,28,0,526,527,5,49,0,0,527,529,3,50,25,0,528,530,3,120,60,0,529,528,
		1,0,0,0,529,530,1,0,0,0,530,119,1,0,0,0,531,534,5,9,0,0,532,535,3,118,
		59,0,533,535,3,50,25,0,534,532,1,0,0,0,534,533,1,0,0,0,535,121,1,0,0,0,
		536,538,5,12,0,0,537,539,3,56,28,0,538,537,1,0,0,0,538,539,1,0,0,0,539,
		123,1,0,0,0,540,541,5,14,0,0,541,125,1,0,0,0,542,543,5,13,0,0,543,127,
		1,0,0,0,544,545,3,54,27,0,545,129,1,0,0,0,546,547,3,56,28,0,547,131,1,
		0,0,0,548,549,3,56,28,0,549,133,1,0,0,0,550,551,5,10,0,0,551,552,5,48,
		0,0,552,553,3,128,64,0,553,554,5,58,0,0,554,555,3,130,65,0,555,556,5,58,
		0,0,556,557,3,132,66,0,557,558,5,49,0,0,558,559,3,50,25,0,559,135,1,0,
		0,0,560,561,5,11,0,0,561,562,5,48,0,0,562,563,3,130,65,0,563,564,5,49,
		0,0,564,565,3,50,25,0,565,137,1,0,0,0,566,567,5,54,0,0,567,139,1,0,0,0,
		568,569,5,67,0,0,569,141,1,0,0,0,570,571,3,140,70,0,571,573,5,48,0,0,572,
		574,3,88,44,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,
		5,49,0,0,576,143,1,0,0,0,577,578,5,55,0,0,578,579,3,142,71,0,579,145,1,
		0,0,0,580,581,5,68,0,0,581,147,1,0,0,0,582,583,7,6,0,0,583,149,1,0,0,0,
		584,585,3,148,74,0,585,587,5,48,0,0,586,588,3,88,44,0,587,586,1,0,0,0,
		587,588,1,0,0,0,588,589,1,0,0,0,589,590,5,49,0,0,590,151,1,0,0,0,591,592,
		7,7,0,0,592,153,1,0,0,0,50,157,165,177,188,199,203,206,216,219,232,247,
		255,261,273,275,281,287,291,306,313,315,322,346,352,373,375,382,392,398,
		407,415,424,429,445,454,466,472,478,481,486,491,496,501,504,520,529,534,
		538,573,587
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
