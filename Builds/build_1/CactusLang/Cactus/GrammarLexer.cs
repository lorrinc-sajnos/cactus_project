//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/warehouse/BME/sem6/onlab/cactus_project/Builds/build_1/Grammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KYW_INCLUDE=1, KYW_STRUCT=2, KYW_IMPLEMENTS=3, KYW_CLASS=4, KYW_STATIC=5, 
		KYW_TRUE=6, KYW_FALSE=7, KYW_NULL=8, KYW_IF=9, KYW_ELSE=10, KYW_FOR=11, 
		KYW_WHILE=12, KYW_RETURN=13, KYW_BREAK=14, KYW_CONTINUE=15, KYW_FREE=16, 
		KYW_ALLOC=17, TAG_PRFX=18, UNOP_INC=19, UNOP_DCR=20, LUNOP_L_NOT=21, LUNOP_B_NOT=22, 
		LUNOP_SIZEOF=23, LUNOP_ADDR=24, OP_ASG=25, OP_STAR=26, OP_DIV=27, OP_REM=28, 
		OP_ADD=29, OP_SUB=30, OP_B_AND=31, OP_B_OR=32, OP_B_XOR=33, OP_LSH=34, 
		OP_RSH=35, OP_EQL=36, OP_L_AND=37, OP_L_OR=38, OP_NEQ=39, OP_LST=40, OP_GRT=41, 
		OP_LSEQ=42, OP_GREQ=43, OP_LAMDA=44, OP_ACC=45, OP_REF=46, COMMA=47, BODY_OPN=48, 
		BODY_CLS=49, PARN_OPN=50, PARN_CLS=51, SQPN_OPN=52, SQPN_CLS=53, PPC_C_BODY_OPN=54, 
		PPC_C_BODY_CLS=55, PPC_C_CODE=56, PPC_C_LAMDA=57, S_QT=58, D_QT=59, EOS=60, 
		INT_STR=61, HEX_STR=62, OCT_STR=63, BIN_STR=64, FLOAT_STR=65, CHAR=66, 
		STRING=67, TAG=68, ID=69, PTR_ID=70, PPC_ID=71, PPC_DEEP_ID=72, COMMENT=73, 
		LINE_COMMENT=74, WHITESPACE=75, NEWLINE=76;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"KYW_INCLUDE", "KYW_STRUCT", "KYW_IMPLEMENTS", "KYW_CLASS", "KYW_STATIC", 
		"KYW_TRUE", "KYW_FALSE", "KYW_NULL", "KYW_IF", "KYW_ELSE", "KYW_FOR", 
		"KYW_WHILE", "KYW_RETURN", "KYW_BREAK", "KYW_CONTINUE", "KYW_FREE", "KYW_ALLOC", 
		"TAG_PRFX", "UNOP_INC", "UNOP_DCR", "LUNOP_L_NOT", "LUNOP_B_NOT", "LUNOP_SIZEOF", 
		"LUNOP_ADDR", "OP_ASG", "OP_STAR", "OP_DIV", "OP_REM", "OP_ADD", "OP_SUB", 
		"OP_B_AND", "OP_B_OR", "OP_B_XOR", "OP_LSH", "OP_RSH", "OP_EQL", "OP_L_AND", 
		"OP_L_OR", "OP_NEQ", "OP_LST", "OP_GRT", "OP_LSEQ", "OP_GREQ", "OP_LAMDA", 
		"OP_ACC", "OP_REF", "COMMA", "BODY_OPN", "BODY_CLS", "PARN_OPN", "PARN_CLS", 
		"SQPN_OPN", "SQPN_CLS", "PPC_PRFX", "PPC_DEEP_PRFX", "PPC_C_PRFX", "PPC_C_BODY_OPN", 
		"PPC_C_BODY_CLS", "PPC_C_CODE", "PPC_C_LAMDA", "S_QT", "D_QT", "EOS", 
		"Digit", "HEX_PRFX", "BIN_PRFX", "OCT_PRFX", "INT_STR", "HEX_STR", "OCT_STR", 
		"BIN_STR", "FLOAT_TYPE", "FLOAT_STR", "CHAR", "EscapeSequence", "SimpleEscapeSequence", 
		"ValidStringChar", "SChar", "STRING", "TAG", "ID", "PTR_ID", "Id_start", 
		"Id_chars", "PPC_ID", "PPC_DEEP_ID", "COMMENT", "LINE_COMMENT", "WHITESPACE", 
		"NEWLINE"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'struct'", "'implements'", "'class'", "'static'", 
		"'true'", "'false'", "'nullptr'", "'if'", "'else'", "'for'", "'while'", 
		"'return'", "'break'", "'continue'", "'free'", "'alloc'", "'@'", "'++'", 
		"'--'", "'!'", "'~'", "'sizeof'", null, "'='", "'*'", null, "'%'", "'+'", 
		"'-'", "'&'", "'|'", "'^'", "'<<'", "'>>'", "'=='", "'&&'", "'||'", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'=>'", "':'", "'.'", "','", "'{'", "'}'", 
		"'('", "')'", "'['", "']'", null, null, null, null, "'''", "'\"'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KYW_INCLUDE", "KYW_STRUCT", "KYW_IMPLEMENTS", "KYW_CLASS", "KYW_STATIC", 
		"KYW_TRUE", "KYW_FALSE", "KYW_NULL", "KYW_IF", "KYW_ELSE", "KYW_FOR", 
		"KYW_WHILE", "KYW_RETURN", "KYW_BREAK", "KYW_CONTINUE", "KYW_FREE", "KYW_ALLOC", 
		"TAG_PRFX", "UNOP_INC", "UNOP_DCR", "LUNOP_L_NOT", "LUNOP_B_NOT", "LUNOP_SIZEOF", 
		"LUNOP_ADDR", "OP_ASG", "OP_STAR", "OP_DIV", "OP_REM", "OP_ADD", "OP_SUB", 
		"OP_B_AND", "OP_B_OR", "OP_B_XOR", "OP_LSH", "OP_RSH", "OP_EQL", "OP_L_AND", 
		"OP_L_OR", "OP_NEQ", "OP_LST", "OP_GRT", "OP_LSEQ", "OP_GREQ", "OP_LAMDA", 
		"OP_ACC", "OP_REF", "COMMA", "BODY_OPN", "BODY_CLS", "PARN_OPN", "PARN_CLS", 
		"SQPN_OPN", "SQPN_CLS", "PPC_C_BODY_OPN", "PPC_C_BODY_CLS", "PPC_C_CODE", 
		"PPC_C_LAMDA", "S_QT", "D_QT", "EOS", "INT_STR", "HEX_STR", "OCT_STR", 
		"BIN_STR", "FLOAT_STR", "CHAR", "STRING", "TAG", "ID", "PTR_ID", "PPC_ID", 
		"PPC_DEEP_ID", "COMMENT", "LINE_COMMENT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,76,563,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
		7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
		7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
		19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
		30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
		35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,
		41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,
		46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
		53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,
		58,1,58,5,58,396,8,58,10,58,12,58,399,9,58,1,58,1,58,1,59,1,59,1,59,1,
		60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,
		66,1,66,1,66,1,67,4,67,424,8,67,11,67,12,67,425,1,68,1,68,1,68,4,68,431,
		8,68,11,68,12,68,432,1,69,1,69,4,69,437,8,69,11,69,12,69,438,1,70,1,70,
		4,70,443,8,70,11,70,12,70,444,1,71,1,71,1,72,3,72,450,8,72,1,72,1,72,1,
		72,3,72,455,8,72,1,73,1,73,1,73,3,73,460,8,73,1,73,1,73,1,74,1,74,1,75,
		1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,478,8,77,1,
		78,1,78,5,78,482,8,78,10,78,12,78,485,9,78,1,78,1,78,1,79,1,79,1,79,1,
		80,1,80,5,80,494,8,80,10,80,12,80,497,9,80,1,81,1,81,5,81,501,8,81,10,
		81,12,81,504,9,81,1,82,3,82,507,8,82,1,83,1,83,3,83,511,8,83,1,84,1,84,
		1,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,5,86,523,8,86,10,86,12,86,526,
		9,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,5,87,537,8,87,10,87,
		12,87,540,9,87,1,87,1,87,1,87,1,87,1,88,4,88,547,8,88,11,88,12,88,548,
		1,88,1,88,1,89,3,89,554,8,89,1,89,1,89,4,89,558,8,89,11,89,12,89,559,1,
		89,1,89,2,524,538,0,90,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
		35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
		47,95,48,97,49,99,50,101,51,103,52,105,53,107,0,109,0,111,0,113,54,115,
		55,117,56,119,57,121,58,123,59,125,60,127,0,129,0,131,0,133,0,135,61,137,
		62,139,63,141,64,143,0,145,65,147,66,149,0,151,0,153,0,155,0,157,67,159,
		68,161,69,163,70,165,0,167,0,169,71,171,72,173,73,175,74,177,75,179,76,
		1,0,11,2,0,47,47,247,247,1,0,48,57,2,0,65,70,97,102,1,0,48,55,1,0,48,49,
		4,0,68,68,70,70,100,100,102,102,4,0,10,10,13,13,39,39,92,92,10,0,34,34,
		39,39,63,63,92,92,97,98,102,102,110,110,114,114,116,116,118,118,4,0,10,
		10,13,13,34,34,92,92,3,0,65,90,95,95,97,122,2,0,9,10,32,32,570,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
		1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,135,
		1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,145,1,0,0,0,0,147,
		1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,169,
		1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,
		1,0,0,0,1,181,1,0,0,0,3,189,1,0,0,0,5,196,1,0,0,0,7,207,1,0,0,0,9,213,
		1,0,0,0,11,220,1,0,0,0,13,225,1,0,0,0,15,231,1,0,0,0,17,239,1,0,0,0,19,
		242,1,0,0,0,21,247,1,0,0,0,23,251,1,0,0,0,25,257,1,0,0,0,27,264,1,0,0,
		0,29,270,1,0,0,0,31,279,1,0,0,0,33,284,1,0,0,0,35,290,1,0,0,0,37,292,1,
		0,0,0,39,295,1,0,0,0,41,298,1,0,0,0,43,300,1,0,0,0,45,302,1,0,0,0,47,309,
		1,0,0,0,49,311,1,0,0,0,51,313,1,0,0,0,53,315,1,0,0,0,55,317,1,0,0,0,57,
		319,1,0,0,0,59,321,1,0,0,0,61,323,1,0,0,0,63,325,1,0,0,0,65,327,1,0,0,
		0,67,329,1,0,0,0,69,332,1,0,0,0,71,335,1,0,0,0,73,338,1,0,0,0,75,341,1,
		0,0,0,77,344,1,0,0,0,79,347,1,0,0,0,81,349,1,0,0,0,83,351,1,0,0,0,85,354,
		1,0,0,0,87,357,1,0,0,0,89,360,1,0,0,0,91,362,1,0,0,0,93,364,1,0,0,0,95,
		366,1,0,0,0,97,368,1,0,0,0,99,370,1,0,0,0,101,372,1,0,0,0,103,374,1,0,
		0,0,105,376,1,0,0,0,107,378,1,0,0,0,109,380,1,0,0,0,111,383,1,0,0,0,113,
		386,1,0,0,0,115,389,1,0,0,0,117,392,1,0,0,0,119,402,1,0,0,0,121,405,1,
		0,0,0,123,407,1,0,0,0,125,409,1,0,0,0,127,411,1,0,0,0,129,413,1,0,0,0,
		131,416,1,0,0,0,133,419,1,0,0,0,135,423,1,0,0,0,137,427,1,0,0,0,139,434,
		1,0,0,0,141,440,1,0,0,0,143,446,1,0,0,0,145,449,1,0,0,0,147,456,1,0,0,
		0,149,463,1,0,0,0,151,465,1,0,0,0,153,468,1,0,0,0,155,477,1,0,0,0,157,
		479,1,0,0,0,159,488,1,0,0,0,161,491,1,0,0,0,163,498,1,0,0,0,165,506,1,
		0,0,0,167,510,1,0,0,0,169,512,1,0,0,0,171,515,1,0,0,0,173,518,1,0,0,0,
		175,532,1,0,0,0,177,546,1,0,0,0,179,557,1,0,0,0,181,182,5,105,0,0,182,
		183,5,110,0,0,183,184,5,99,0,0,184,185,5,108,0,0,185,186,5,117,0,0,186,
		187,5,100,0,0,187,188,5,101,0,0,188,2,1,0,0,0,189,190,5,115,0,0,190,191,
		5,116,0,0,191,192,5,114,0,0,192,193,5,117,0,0,193,194,5,99,0,0,194,195,
		5,116,0,0,195,4,1,0,0,0,196,197,5,105,0,0,197,198,5,109,0,0,198,199,5,
		112,0,0,199,200,5,108,0,0,200,201,5,101,0,0,201,202,5,109,0,0,202,203,
		5,101,0,0,203,204,5,110,0,0,204,205,5,116,0,0,205,206,5,115,0,0,206,6,
		1,0,0,0,207,208,5,99,0,0,208,209,5,108,0,0,209,210,5,97,0,0,210,211,5,
		115,0,0,211,212,5,115,0,0,212,8,1,0,0,0,213,214,5,115,0,0,214,215,5,116,
		0,0,215,216,5,97,0,0,216,217,5,116,0,0,217,218,5,105,0,0,218,219,5,99,
		0,0,219,10,1,0,0,0,220,221,5,116,0,0,221,222,5,114,0,0,222,223,5,117,0,
		0,223,224,5,101,0,0,224,12,1,0,0,0,225,226,5,102,0,0,226,227,5,97,0,0,
		227,228,5,108,0,0,228,229,5,115,0,0,229,230,5,101,0,0,230,14,1,0,0,0,231,
		232,5,110,0,0,232,233,5,117,0,0,233,234,5,108,0,0,234,235,5,108,0,0,235,
		236,5,112,0,0,236,237,5,116,0,0,237,238,5,114,0,0,238,16,1,0,0,0,239,240,
		5,105,0,0,240,241,5,102,0,0,241,18,1,0,0,0,242,243,5,101,0,0,243,244,5,
		108,0,0,244,245,5,115,0,0,245,246,5,101,0,0,246,20,1,0,0,0,247,248,5,102,
		0,0,248,249,5,111,0,0,249,250,5,114,0,0,250,22,1,0,0,0,251,252,5,119,0,
		0,252,253,5,104,0,0,253,254,5,105,0,0,254,255,5,108,0,0,255,256,5,101,
		0,0,256,24,1,0,0,0,257,258,5,114,0,0,258,259,5,101,0,0,259,260,5,116,0,
		0,260,261,5,117,0,0,261,262,5,114,0,0,262,263,5,110,0,0,263,26,1,0,0,0,
		264,265,5,98,0,0,265,266,5,114,0,0,266,267,5,101,0,0,267,268,5,97,0,0,
		268,269,5,107,0,0,269,28,1,0,0,0,270,271,5,99,0,0,271,272,5,111,0,0,272,
		273,5,110,0,0,273,274,5,116,0,0,274,275,5,105,0,0,275,276,5,110,0,0,276,
		277,5,117,0,0,277,278,5,101,0,0,278,30,1,0,0,0,279,280,5,102,0,0,280,281,
		5,114,0,0,281,282,5,101,0,0,282,283,5,101,0,0,283,32,1,0,0,0,284,285,5,
		97,0,0,285,286,5,108,0,0,286,287,5,108,0,0,287,288,5,111,0,0,288,289,5,
		99,0,0,289,34,1,0,0,0,290,291,5,64,0,0,291,36,1,0,0,0,292,293,5,43,0,0,
		293,294,5,43,0,0,294,38,1,0,0,0,295,296,5,45,0,0,296,297,5,45,0,0,297,
		40,1,0,0,0,298,299,5,33,0,0,299,42,1,0,0,0,300,301,5,126,0,0,301,44,1,
		0,0,0,302,303,5,115,0,0,303,304,5,105,0,0,304,305,5,122,0,0,305,306,5,
		101,0,0,306,307,5,111,0,0,307,308,5,102,0,0,308,46,1,0,0,0,309,310,3,61,
		30,0,310,48,1,0,0,0,311,312,5,61,0,0,312,50,1,0,0,0,313,314,5,42,0,0,314,
		52,1,0,0,0,315,316,7,0,0,0,316,54,1,0,0,0,317,318,5,37,0,0,318,56,1,0,
		0,0,319,320,5,43,0,0,320,58,1,0,0,0,321,322,5,45,0,0,322,60,1,0,0,0,323,
		324,5,38,0,0,324,62,1,0,0,0,325,326,5,124,0,0,326,64,1,0,0,0,327,328,5,
		94,0,0,328,66,1,0,0,0,329,330,5,60,0,0,330,331,5,60,0,0,331,68,1,0,0,0,
		332,333,5,62,0,0,333,334,5,62,0,0,334,70,1,0,0,0,335,336,5,61,0,0,336,
		337,5,61,0,0,337,72,1,0,0,0,338,339,5,38,0,0,339,340,5,38,0,0,340,74,1,
		0,0,0,341,342,5,124,0,0,342,343,5,124,0,0,343,76,1,0,0,0,344,345,5,33,
		0,0,345,346,5,61,0,0,346,78,1,0,0,0,347,348,5,60,0,0,348,80,1,0,0,0,349,
		350,5,62,0,0,350,82,1,0,0,0,351,352,5,60,0,0,352,353,5,61,0,0,353,84,1,
		0,0,0,354,355,5,62,0,0,355,356,5,61,0,0,356,86,1,0,0,0,357,358,5,61,0,
		0,358,359,5,62,0,0,359,88,1,0,0,0,360,361,5,58,0,0,361,90,1,0,0,0,362,
		363,5,46,0,0,363,92,1,0,0,0,364,365,5,44,0,0,365,94,1,0,0,0,366,367,5,
		123,0,0,367,96,1,0,0,0,368,369,5,125,0,0,369,98,1,0,0,0,370,371,5,40,0,
		0,371,100,1,0,0,0,372,373,5,41,0,0,373,102,1,0,0,0,374,375,5,91,0,0,375,
		104,1,0,0,0,376,377,5,93,0,0,377,106,1,0,0,0,378,379,5,36,0,0,379,108,
		1,0,0,0,380,381,5,36,0,0,381,382,5,36,0,0,382,110,1,0,0,0,383,384,3,109,
		54,0,384,385,5,67,0,0,385,112,1,0,0,0,386,387,3,111,55,0,387,388,3,95,
		47,0,388,114,1,0,0,0,389,390,3,97,48,0,390,391,3,111,55,0,391,116,1,0,
		0,0,392,397,3,113,56,0,393,394,1,0,0,0,394,396,9,0,0,0,395,393,1,0,0,0,
		396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,
		1,0,0,0,400,401,3,115,57,0,401,118,1,0,0,0,402,403,3,111,55,0,403,404,
		3,87,43,0,404,120,1,0,0,0,405,406,5,39,0,0,406,122,1,0,0,0,407,408,5,34,
		0,0,408,124,1,0,0,0,409,410,5,59,0,0,410,126,1,0,0,0,411,412,7,1,0,0,412,
		128,1,0,0,0,413,414,5,48,0,0,414,415,5,120,0,0,415,130,1,0,0,0,416,417,
		5,48,0,0,417,418,5,98,0,0,418,132,1,0,0,0,419,420,5,48,0,0,420,421,5,111,
		0,0,421,134,1,0,0,0,422,424,3,127,63,0,423,422,1,0,0,0,424,425,1,0,0,0,
		425,423,1,0,0,0,425,426,1,0,0,0,426,136,1,0,0,0,427,430,3,129,64,0,428,
		431,3,127,63,0,429,431,7,2,0,0,430,428,1,0,0,0,430,429,1,0,0,0,431,432,
		1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,138,1,0,0,0,434,436,3,133,
		66,0,435,437,7,3,0,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,
		439,1,0,0,0,439,140,1,0,0,0,440,442,3,131,65,0,441,443,7,4,0,0,442,441,
		1,0,0,0,443,444,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,142,1,0,0,
		0,446,447,7,5,0,0,447,144,1,0,0,0,448,450,3,135,67,0,449,448,1,0,0,0,449,
		450,1,0,0,0,450,451,1,0,0,0,451,452,5,46,0,0,452,454,3,135,67,0,453,455,
		3,143,71,0,454,453,1,0,0,0,454,455,1,0,0,0,455,146,1,0,0,0,456,459,5,39,
		0,0,457,460,8,6,0,0,458,460,3,149,74,0,459,457,1,0,0,0,459,458,1,0,0,0,
		460,461,1,0,0,0,461,462,5,39,0,0,462,148,1,0,0,0,463,464,3,151,75,0,464,
		150,1,0,0,0,465,466,5,92,0,0,466,467,7,7,0,0,467,152,1,0,0,0,468,469,8,
		8,0,0,469,154,1,0,0,0,470,478,3,153,76,0,471,478,3,149,74,0,472,473,5,
		92,0,0,473,478,5,10,0,0,474,475,5,92,0,0,475,476,5,13,0,0,476,478,5,10,
		0,0,477,470,1,0,0,0,477,471,1,0,0,0,477,472,1,0,0,0,477,474,1,0,0,0,478,
		156,1,0,0,0,479,483,5,34,0,0,480,482,3,155,77,0,481,480,1,0,0,0,482,485,
		1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,
		0,486,487,5,34,0,0,487,158,1,0,0,0,488,489,3,35,17,0,489,490,3,161,80,
		0,490,160,1,0,0,0,491,495,3,165,82,0,492,494,3,167,83,0,493,492,1,0,0,
		0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,162,1,0,0,0,497,
		495,1,0,0,0,498,502,3,161,80,0,499,501,3,51,25,0,500,499,1,0,0,0,501,504,
		1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,164,1,0,0,0,504,502,1,0,0,
		0,505,507,7,9,0,0,506,505,1,0,0,0,507,166,1,0,0,0,508,511,3,165,82,0,509,
		511,3,127,63,0,510,508,1,0,0,0,510,509,1,0,0,0,511,168,1,0,0,0,512,513,
		3,107,53,0,513,514,3,161,80,0,514,170,1,0,0,0,515,516,3,109,54,0,516,517,
		3,161,80,0,517,172,1,0,0,0,518,519,5,47,0,0,519,520,5,42,0,0,520,524,1,
		0,0,0,521,523,9,0,0,0,522,521,1,0,0,0,523,526,1,0,0,0,524,525,1,0,0,0,
		524,522,1,0,0,0,525,527,1,0,0,0,526,524,1,0,0,0,527,528,5,42,0,0,528,529,
		5,47,0,0,529,530,1,0,0,0,530,531,6,86,0,0,531,174,1,0,0,0,532,533,5,47,
		0,0,533,534,5,47,0,0,534,538,1,0,0,0,535,537,9,0,0,0,536,535,1,0,0,0,537,
		540,1,0,0,0,538,539,1,0,0,0,538,536,1,0,0,0,539,541,1,0,0,0,540,538,1,
		0,0,0,541,542,5,10,0,0,542,543,1,0,0,0,543,544,6,87,0,0,544,176,1,0,0,
		0,545,547,7,10,0,0,546,545,1,0,0,0,547,548,1,0,0,0,548,546,1,0,0,0,548,
		549,1,0,0,0,549,550,1,0,0,0,550,551,6,88,0,0,551,178,1,0,0,0,552,554,5,
		13,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,558,5,10,0,
		0,556,558,5,13,0,0,557,553,1,0,0,0,557,556,1,0,0,0,558,559,1,0,0,0,559,
		557,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,6,89,0,0,562,180,1,
		0,0,0,22,0,397,425,430,432,438,444,449,454,459,477,483,495,502,506,510,
		524,538,548,553,557,559,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
