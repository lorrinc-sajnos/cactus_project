//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/warehouse/BME/sem6/onlab/cactus_project/Builds/build_1/Grammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KYW_INCLUDE=1, KYW_STRUCT=2, KYW_IMPLEMENTS=3, KYW_CLASS=4, KYW_STATIC=5, 
		KYW_TRUE=6, KYW_FALSE=7, KYW_NULL=8, KYW_IF=9, KYW_ELSE=10, KYW_FOR=11, 
		KYW_WHILE=12, KYW_RETURN=13, KYW_BREAK=14, KYW_CONTINUE=15, KYW_FREE=16, 
		KYW_ALLOC=17, TAG_PRFX=18, OP_ASG=19, UNOP_INC=20, UNOP_DCR=21, LUNOP_L_NOT=22, 
		LUNOP_B_NOT=23, LUNOP_SIZEOF=24, OP_STAR=25, OP_DIV=26, OP_REM=27, OP_ADD=28, 
		OP_SUB=29, OP_B_AND=30, OP_B_OR=31, OP_B_XOR=32, OP_LSH=33, OP_RSH=34, 
		OP_EQL=35, OP_L_AND=36, OP_L_OR=37, OP_NEQ=38, OP_LST=39, OP_GRT=40, OP_LSEQ=41, 
		OP_GREQ=42, OP_LAMDA=43, OP_ACC=44, OP_REF=45, COMMA=46, BODY_OPN=47, 
		BODY_CLS=48, PARN_OPN=49, PARN_CLS=50, SQPN_OPN=51, SQPN_CLS=52, PPC_C_BODY_OPN=53, 
		PPC_C_BODY_CLS=54, PPC_C_CODE=55, PPC_C_LAMDA=56, S_QT=57, D_QT=58, EOS=59, 
		INT_STR=60, HEX_STR=61, OCT_STR=62, BIN_STR=63, FLOAT_STR=64, CHAR=65, 
		STRING=66, TAG=67, ID=68, PTR_ID=69, PPC_ID=70, PPC_DEEP_ID=71, COMMENT=72, 
		LINE_COMMENT=73, WHITESPACE=74, NEWLINE=75;
	public const int
		RULE_codefile = 0, RULE_tags = 1, RULE_tag = 2, RULE_fileStatement = 3, 
		RULE_preprocessor_stm = 4, RULE_filepath = 5, RULE_ppc__Include = 6, RULE_type = 7, 
		RULE_fileVarDcl = 8, RULE_funcDclHeader = 9, RULE_funcDcl = 10, RULE_funcLamdBody = 11, 
		RULE_returnType = 12, RULE_param = 13, RULE_paramName = 14, RULE_funcName = 15, 
		RULE_varName = 16, RULE_fieldDcl = 17, RULE_structName = 18, RULE_structDcl = 19, 
		RULE_structBody = 20, RULE_className = 21, RULE_classDcl = 22, RULE_parentClass = 23, 
		RULE_interface = 24, RULE_interfaces = 25, RULE_classBody = 26, RULE_codeBody = 27, 
		RULE_statement = 28, RULE_varDcl = 29, RULE_varDclBody = 30, RULE_expressionStatement = 31, 
		RULE_expression = 32, RULE_opMultLvl = 33, RULE_opAddLvl = 34, RULE_opBitLvl = 35, 
		RULE_opCompLvl = 36, RULE_opLeftUn = 37, RULE_opRightUn = 38, RULE_opAssignmentLvl = 39, 
		RULE_primaryExp = 40, RULE_objFuncCall = 41, RULE_objFieldRef = 42, RULE_primaryExpVal = 43, 
		RULE_accOp = 44, RULE_fieldRef = 45, RULE_parenthsExp = 46, RULE_alloc = 47, 
		RULE_free = 48, RULE_explicitCast = 49, RULE_funcCall = 50, RULE_funcParamVals = 51, 
		RULE_funcRef = 52, RULE_literalExp = 53, RULE_nullLiteral = 54, RULE_numSign = 55, 
		RULE_numLiteral = 56, RULE_intLiteral = 57, RULE_intDecLiteral = 58, RULE_intHexLiteral = 59, 
		RULE_intBinLiteral = 60, RULE_intOctLiteral = 61, RULE_floatLiteral = 62, 
		RULE_strLiteral = 63, RULE_charLiteral = 64, RULE_boolLiteral = 65, RULE_varRef = 66, 
		RULE_ifStatement = 67, RULE_elseStatement = 68, RULE_returnStatement = 69, 
		RULE_continueStatement = 70, RULE_breakStatement = 71, RULE_loopDecl = 72, 
		RULE_loopCond = 73, RULE_endExp = 74, RULE_forLoop = 75, RULE_whileLoop = 76, 
		RULE_ppc__C_Code_Body = 77, RULE_ppc__C_id = 78, RULE_ppc__C_Func = 79, 
		RULE_ppc__C_Func_Map = 80, RULE_ppc__varRef = 81, RULE_ppc__funcRef = 82, 
		RULE_ppc__funcCall = 83;
	public static readonly string[] ruleNames = {
		"codefile", "tags", "tag", "fileStatement", "preprocessor_stm", "filepath", 
		"ppc__Include", "type", "fileVarDcl", "funcDclHeader", "funcDcl", "funcLamdBody", 
		"returnType", "param", "paramName", "funcName", "varName", "fieldDcl", 
		"structName", "structDcl", "structBody", "className", "classDcl", "parentClass", 
		"interface", "interfaces", "classBody", "codeBody", "statement", "varDcl", 
		"varDclBody", "expressionStatement", "expression", "opMultLvl", "opAddLvl", 
		"opBitLvl", "opCompLvl", "opLeftUn", "opRightUn", "opAssignmentLvl", "primaryExp", 
		"objFuncCall", "objFieldRef", "primaryExpVal", "accOp", "fieldRef", "parenthsExp", 
		"alloc", "free", "explicitCast", "funcCall", "funcParamVals", "funcRef", 
		"literalExp", "nullLiteral", "numSign", "numLiteral", "intLiteral", "intDecLiteral", 
		"intHexLiteral", "intBinLiteral", "intOctLiteral", "floatLiteral", "strLiteral", 
		"charLiteral", "boolLiteral", "varRef", "ifStatement", "elseStatement", 
		"returnStatement", "continueStatement", "breakStatement", "loopDecl", 
		"loopCond", "endExp", "forLoop", "whileLoop", "ppc__C_Code_Body", "ppc__C_id", 
		"ppc__C_Func", "ppc__C_Func_Map", "ppc__varRef", "ppc__funcRef", "ppc__funcCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'struct'", "'implements'", "'class'", "'static'", 
		"'true'", "'false'", "'nullptr'", "'if'", "'else'", "'for'", "'while'", 
		"'return'", "'break'", "'continue'", "'free'", "'alloc'", "'@'", "'='", 
		"'++'", "'--'", "'!'", "'~'", "'sizeof'", "'*'", null, "'%'", "'+'", "'-'", 
		"'&'", "'|'", "'^'", "'<<'", "'>>'", "'=='", "'&&'", "'||'", "'!='", "'<'", 
		"'>'", "'<='", "'>='", "'=>'", "':'", "'.'", "','", "'{'", "'}'", "'('", 
		"')'", "'['", "']'", null, null, null, null, "'''", "'\"'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KYW_INCLUDE", "KYW_STRUCT", "KYW_IMPLEMENTS", "KYW_CLASS", "KYW_STATIC", 
		"KYW_TRUE", "KYW_FALSE", "KYW_NULL", "KYW_IF", "KYW_ELSE", "KYW_FOR", 
		"KYW_WHILE", "KYW_RETURN", "KYW_BREAK", "KYW_CONTINUE", "KYW_FREE", "KYW_ALLOC", 
		"TAG_PRFX", "OP_ASG", "UNOP_INC", "UNOP_DCR", "LUNOP_L_NOT", "LUNOP_B_NOT", 
		"LUNOP_SIZEOF", "OP_STAR", "OP_DIV", "OP_REM", "OP_ADD", "OP_SUB", "OP_B_AND", 
		"OP_B_OR", "OP_B_XOR", "OP_LSH", "OP_RSH", "OP_EQL", "OP_L_AND", "OP_L_OR", 
		"OP_NEQ", "OP_LST", "OP_GRT", "OP_LSEQ", "OP_GREQ", "OP_LAMDA", "OP_ACC", 
		"OP_REF", "COMMA", "BODY_OPN", "BODY_CLS", "PARN_OPN", "PARN_CLS", "SQPN_OPN", 
		"SQPN_CLS", "PPC_C_BODY_OPN", "PPC_C_BODY_CLS", "PPC_C_CODE", "PPC_C_LAMDA", 
		"S_QT", "D_QT", "EOS", "INT_STR", "HEX_STR", "OCT_STR", "BIN_STR", "FLOAT_STR", 
		"CHAR", "STRING", "TAG", "ID", "PTR_ID", "PPC_ID", "PPC_DEEP_ID", "COMMENT", 
		"LINE_COMMENT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodefileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileStatementContext[] fileStatement() {
			return GetRuleContexts<FileStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileStatementContext fileStatement(int i) {
			return GetRuleContext<FileStatementContext>(i);
		}
		public CodefileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codefile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodefile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodefileContext codefile() {
		CodefileContext _localctx = new CodefileContext(Context, State);
		EnterRule(_localctx, 0, RULE_codefile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KYW_STRUCT || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 7L) != 0)) {
				{
				{
				State = 168;
				fileStatement();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public TagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tags; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTags(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTags(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagsContext tags() {
		TagsContext _localctx = new TagsContext(Context, State);
		EnterRule(_localctx, 2, RULE_tags);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 176;
					tag();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(GrammarParser.TAG, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 4, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileVarDclContext fileVarDcl() {
			return GetRuleContext<FileVarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDclContext structDcl() {
			return GetRuleContext<StructDclContext>(0);
		}
		public FileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileStatementContext fileStatement() {
		FileStatementContext _localctx = new FileStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileStatement);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 183;
				tags();
				State = 184;
				Match(EOS);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 186;
				fileVarDcl();
				State = 187;
				Match(EOS);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 189;
				funcDcl();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 190;
				structDcl();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_stmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__IncludeContext ppc__Include() {
			return GetRuleContext<Ppc__IncludeContext>(0);
		}
		public Preprocessor_stmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_stm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPreprocessor_stm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPreprocessor_stm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_stm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_stmContext preprocessor_stm() {
		Preprocessor_stmContext _localctx = new Preprocessor_stmContext(Context, State);
		EnterRule(_localctx, 8, RULE_preprocessor_stm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 193;
			ppc__Include();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilepathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_DIV() { return GetTokens(GrammarParser.OP_DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV(int i) {
			return GetToken(GrammarParser.OP_DIV, i);
		}
		public FilepathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filepath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFilepath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFilepath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilepath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilepathContext filepath() {
		FilepathContext _localctx = new FilepathContext(Context, State);
		EnterRule(_localctx, 10, RULE_filepath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(OP_LST);
			State = 196;
			Match(ID);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_DIV) {
				{
				{
				State = 197;
				Match(OP_DIV);
				State = 198;
				Match(ID);
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(OP_GRT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_INCLUDE() { return GetToken(GrammarParser.KYW_INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilepathContext filepath() {
			return GetRuleContext<FilepathContext>(0);
		}
		public Ppc__IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__Include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__Include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__Include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__Include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__IncludeContext ppc__Include() {
		Ppc__IncludeContext _localctx = new Ppc__IncludeContext(Context, State);
		EnterRule(_localctx, 12, RULE_ppc__Include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(KYW_INCLUDE);
			State = 207;
			filepath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PTR_ID() { return GetToken(GrammarParser.PTR_ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==PTR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileVarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public FileVarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileVarDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFileVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFileVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileVarDclContext fileVarDcl() {
		FileVarDclContext _localctx = new FileVarDclContext(Context, State);
		EnterRule(_localctx, 16, RULE_fileVarDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncNameContext funcName() {
			return GetRuleContext<FuncNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public FuncDclHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDclHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncDclHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncDclHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDclHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclHeaderContext funcDclHeader() {
		FuncDclHeaderContext _localctx = new FuncDclHeaderContext(Context, State);
		EnterRule(_localctx, 18, RULE_funcDclHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 213;
				tags();
				}
			}

			State = 216;
			returnType();
			State = 217;
			funcName();
			State = 218;
			Match(PARN_OPN);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==PTR_ID) {
				{
				State = 219;
				param();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 220;
					Match(COMMA);
					State = 221;
					param();
					}
					}
					State = 226;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 229;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclHeaderContext funcDclHeader() {
			return GetRuleContext<FuncDclHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncLamdBodyContext funcLamdBody() {
			return GetRuleContext<FuncLamdBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_Code_BodyContext ppc__C_Code_Body() {
			return GetRuleContext<Ppc__C_Code_BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_Func_MapContext ppc__C_Func_Map() {
			return GetRuleContext<Ppc__C_Func_MapContext>(0);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			funcDclHeader();
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BODY_OPN:
				{
				State = 232;
				codeBody();
				}
				break;
			case OP_LAMDA:
				{
				State = 233;
				funcLamdBody();
				State = 234;
				Match(EOS);
				}
				break;
			case PPC_C_CODE:
				{
				State = 236;
				ppc__C_Code_Body();
				}
				break;
			case PPC_C_LAMDA:
				{
				State = 237;
				ppc__C_Func_Map();
				State = 238;
				Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncLamdBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMDA() { return GetToken(GrammarParser.OP_LAMDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FuncLamdBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcLamdBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncLamdBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncLamdBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLamdBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncLamdBodyContext funcLamdBody() {
		FuncLamdBodyContext _localctx = new FuncLamdBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_funcLamdBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(OP_LAMDA);
			State = 243;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamNameContext paramName() {
			return GetRuleContext<ParamNameContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 26, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			type();
			State = 248;
			paramName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ParamNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamNameContext paramName() {
		ParamNameContext _localctx = new ParamNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_paramName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public FuncNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncNameContext funcName() {
		FuncNameContext _localctx = new FuncNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public FieldDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDclContext fieldDcl() {
		FieldDclContext _localctx = new FieldDclContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_STRUCT() { return GetToken(GrammarParser.KYW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public StructDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDclContext structDcl() {
		StructDclContext _localctx = new StructDclContext(Context, State);
		EnterRule(_localctx, 38, RULE_structDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 260;
				tags();
				}
			}

			State = 263;
			Match(KYW_STRUCT);
			State = 264;
			structName();
			State = 265;
			Match(BODY_OPN);
			State = 266;
			structBody();
			State = 267;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext[] funcDcl() {
			return GetRuleContexts<FuncDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl(int i) {
			return GetRuleContext<FuncDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext[] fieldDcl() {
			return GetRuleContexts<FieldDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext fieldDcl(int i) {
			return GetRuleContext<FieldDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_structBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 7L) != 0)) {
				{
				State = 273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 269;
					funcDcl();
					}
					break;
				case 2:
					{
					{
					State = 270;
					fieldDcl();
					State = 271;
					Match(EOS);
					}
					}
					break;
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_CLASS() { return GetToken(GrammarParser.KYW_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC() { return GetToken(GrammarParser.OP_ACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParentClassContext parentClass() {
			return GetRuleContext<ParentClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_IMPLEMENTS() { return GetToken(GrammarParser.KYW_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesContext interfaces() {
			return GetRuleContext<InterfacesContext>(0);
		}
		public ClassDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClassDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClassDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDclContext classDcl() {
		ClassDclContext _localctx = new ClassDclContext(Context, State);
		EnterRule(_localctx, 44, RULE_classDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 280;
				tags();
				}
			}

			State = 283;
			Match(KYW_CLASS);
			State = 284;
			className();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ACC) {
				{
				State = 285;
				Match(OP_ACC);
				State = 286;
				parentClass();
				}
			}

			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KYW_IMPLEMENTS) {
				{
				State = 289;
				Match(KYW_IMPLEMENTS);
				State = 290;
				interfaces();
				}
			}

			State = 293;
			Match(BODY_OPN);
			State = 294;
			classBody();
			State = 295;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ParentClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParentClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParentClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentClassContext parentClass() {
		ParentClassContext _localctx = new ParentClassContext(Context, State);
		EnterRule(_localctx, 46, RULE_parentClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 48, RULE_interface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public InterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesContext interfaces() {
		InterfacesContext _localctx = new InterfacesContext(Context, State);
		EnterRule(_localctx, 50, RULE_interfaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			@interface();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 302;
				Match(COMMA);
				State = 303;
				@interface();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext[] funcDcl() {
			return GetRuleContexts<FuncDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl(int i) {
			return GetRuleContext<FuncDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext[] fieldDcl() {
			return GetRuleContexts<FieldDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext fieldDcl(int i) {
			return GetRuleContext<FieldDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 7L) != 0)) {
				{
				State = 313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 309;
					funcDcl();
					}
					break;
				case 2:
					{
					{
					State = 310;
					fieldDcl();
					State = 311;
					Match(EOS);
					}
					}
					break;
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCodeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCodeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBodyContext codeBody() {
		CodeBodyContext _localctx = new CodeBodyContext(Context, State);
		EnterRule(_localctx, 54, RULE_codeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(BODY_OPN);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152358552708060736L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 255L) != 0)) {
				{
				{
				State = 319;
				statement();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeContext free() {
			return GetRuleContext<FreeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 327;
				tags();
				}
				break;
			}
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 330;
				varDcl();
				State = 331;
				Match(EOS);
				}
				break;
			case 2:
				{
				State = 333;
				expressionStatement();
				State = 334;
				Match(EOS);
				}
				break;
			case 3:
				{
				State = 336;
				forLoop();
				}
				break;
			case 4:
				{
				State = 337;
				breakStatement();
				State = 338;
				Match(EOS);
				}
				break;
			case 5:
				{
				State = 340;
				continueStatement();
				State = 341;
				Match(EOS);
				}
				break;
			case 6:
				{
				State = 343;
				returnStatement();
				State = 344;
				Match(EOS);
				}
				break;
			case 7:
				{
				State = 346;
				free();
				State = 347;
				Match(EOS);
				}
				break;
			case 8:
				{
				State = 349;
				tags();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDclBodyContext[] varDclBody() {
			return GetRuleContexts<VarDclBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDclBodyContext varDclBody(int i) {
			return GetRuleContext<VarDclBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 58, RULE_varDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 352;
				tags();
				}
			}

			State = 355;
			type();
			State = 356;
			varDclBody();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 357;
				Match(COMMA);
				State = 358;
				varDclBody();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(GrammarParser.OP_ASG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDclBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarDclBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarDclBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDclBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclBodyContext varDclBody() {
		VarDclBodyContext _localctx = new VarDclBodyContext(Context, State);
		EnterRule(_localctx, 60, RULE_varDclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			varName();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASG) {
				{
				State = 365;
				Match(OP_ASG);
				State = 366;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpContext primaryExp() {
			return GetRuleContext<PrimaryExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpMultLvlContext opMultLvl() {
			return GetRuleContext<OpMultLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpAddLvlContext opAddLvl() {
			return GetRuleContext<OpAddLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBitLvlContext opBitLvl() {
			return GetRuleContext<OpBitLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpCompLvlContext opCompLvl() {
			return GetRuleContext<OpCompLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpAssignmentLvlContext opAssignmentLvl() {
			return GetRuleContext<OpAssignmentLvlContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 372;
			primaryExp(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 394;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 374;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 375;
						opMultLvl();
						State = 376;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 378;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 379;
						opAddLvl();
						State = 380;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 382;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 383;
						opBitLvl();
						State = 384;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 386;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 387;
						opCompLvl();
						State = 388;
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 390;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 391;
						opAssignmentLvl();
						State = 392;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpMultLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_STAR() { return GetToken(GrammarParser.OP_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(GrammarParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REM() { return GetToken(GrammarParser.OP_REM, 0); }
		public OpMultLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMultLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpMultLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpMultLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMultLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpMultLvlContext opMultLvl() {
		OpMultLvlContext _localctx = new OpMultLvlContext(Context, State);
		EnterRule(_localctx, 66, RULE_opMultLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 234881024L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAddLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(GrammarParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(GrammarParser.OP_SUB, 0); }
		public OpAddLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAddLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpAddLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpAddLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAddLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAddLvlContext opAddLvl() {
		OpAddLvlContext _localctx = new OpAddLvlContext(Context, State);
		EnterRule(_localctx, 68, RULE_opAddLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpBitLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_AND() { return GetToken(GrammarParser.OP_B_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(GrammarParser.OP_B_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_XOR() { return GetToken(GrammarParser.OP_B_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSH() { return GetToken(GrammarParser.OP_LSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSH() { return GetToken(GrammarParser.OP_RSH, 0); }
		public OpBitLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opBitLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpBitLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpBitLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBitLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpBitLvlContext opBitLvl() {
		OpBitLvlContext _localctx = new OpBitLvlContext(Context, State);
		EnterRule(_localctx, 70, RULE_opBitLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCompLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQL() { return GetToken(GrammarParser.OP_EQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEQ() { return GetToken(GrammarParser.OP_NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_L_AND() { return GetToken(GrammarParser.OP_L_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_L_OR() { return GetToken(GrammarParser.OP_L_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREQ() { return GetToken(GrammarParser.OP_GREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSEQ() { return GetToken(GrammarParser.OP_LSEQ, 0); }
		public OpCompLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCompLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpCompLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpCompLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCompLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCompLvlContext opCompLvl() {
		OpCompLvlContext _localctx = new OpCompLvlContext(Context, State);
		EnterRule(_localctx, 72, RULE_opCompLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8761733283840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLeftUnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_DCR() { return GetToken(GrammarParser.UNOP_DCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_INC() { return GetToken(GrammarParser.UNOP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_B_NOT() { return GetToken(GrammarParser.LUNOP_B_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_L_NOT() { return GetToken(GrammarParser.LUNOP_L_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_SIZEOF() { return GetToken(GrammarParser.LUNOP_SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_AND() { return GetToken(GrammarParser.OP_B_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_STAR() { return GetToken(GrammarParser.OP_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitCastContext explicitCast() {
			return GetRuleContext<ExplicitCastContext>(0);
		}
		public OpLeftUnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLeftUn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpLeftUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpLeftUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLeftUn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLeftUnContext opLeftUn() {
		OpLeftUnContext _localctx = new OpLeftUnContext(Context, State);
		EnterRule(_localctx, 74, RULE_opLeftUn);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNOP_DCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				Match(UNOP_DCR);
				}
				break;
			case UNOP_INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				Match(UNOP_INC);
				}
				break;
			case LUNOP_B_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 409;
				Match(LUNOP_B_NOT);
				}
				break;
			case LUNOP_L_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 410;
				Match(LUNOP_L_NOT);
				}
				break;
			case LUNOP_SIZEOF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 411;
				Match(LUNOP_SIZEOF);
				}
				break;
			case OP_B_AND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 412;
				Match(OP_B_AND);
				}
				break;
			case OP_STAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 413;
				Match(OP_STAR);
				}
				break;
			case PARN_OPN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 414;
				explicitCast();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpRightUnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_DCR() { return GetToken(GrammarParser.UNOP_DCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_INC() { return GetToken(GrammarParser.UNOP_INC, 0); }
		public OpRightUnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opRightUn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpRightUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpRightUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpRightUn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpRightUnContext opRightUn() {
		OpRightUnContext _localctx = new OpRightUnContext(Context, State);
		EnterRule(_localctx, 76, RULE_opRightUn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_la = TokenStream.LA(1);
			if ( !(_la==UNOP_INC || _la==UNOP_DCR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAssignmentLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(GrammarParser.OP_ASG, 0); }
		public OpAssignmentLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAssignmentLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpAssignmentLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpAssignmentLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAssignmentLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAssignmentLvlContext opAssignmentLvl() {
		OpAssignmentLvlContext _localctx = new OpAssignmentLvlContext(Context, State);
		EnterRule(_localctx, 78, RULE_opAssignmentLvl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(OP_ASG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpValContext primaryExpVal() {
			return GetRuleContext<PrimaryExpValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpRightUnContext opRightUn() {
			return GetRuleContext<OpRightUnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpLeftUnContext opLeftUn() {
			return GetRuleContext<OpLeftUnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocContext alloc() {
			return GetRuleContext<AllocContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpContext primaryExp() {
			return GetRuleContext<PrimaryExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjFuncCallContext objFuncCall() {
			return GetRuleContext<ObjFuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjFieldRefContext objFieldRef() {
			return GetRuleContext<ObjFieldRefContext>(0);
		}
		public PrimaryExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpContext primaryExp() {
		return primaryExp(0);
	}

	private PrimaryExpContext primaryExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpContext _localctx = new PrimaryExpContext(Context, _parentState);
		PrimaryExpContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_primaryExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 422;
				primaryExpVal();
				State = 424;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 423;
					opRightUn();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 426;
				opLeftUn();
				State = 427;
				primaryExpVal();
				}
				break;
			case 3:
				{
				State = 429;
				alloc();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 436;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExp);
						State = 432;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 433;
						objFuncCall();
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExp);
						State = 434;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 435;
						objFieldRef();
						}
						break;
					}
					} 
				}
				State = 440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjFuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccOpContext accOp() {
			return GetRuleContext<AccOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ObjFuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objFuncCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterObjFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitObjFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjFuncCallContext objFuncCall() {
		ObjFuncCallContext _localctx = new ObjFuncCallContext(Context, State);
		EnterRule(_localctx, 82, RULE_objFuncCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			accOp();
			State = 442;
			funcCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjFieldRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccOpContext accOp() {
			return GetRuleContext<AccOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldRefContext fieldRef() {
			return GetRuleContext<FieldRefContext>(0);
		}
		public ObjFieldRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objFieldRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterObjFieldRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitObjFieldRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjFieldRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjFieldRefContext objFieldRef() {
		ObjFieldRefContext _localctx = new ObjFieldRefContext(Context, State);
		EnterRule(_localctx, 84, RULE_objFieldRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			accOp();
			State = 445;
			fieldRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthsExpContext parenthsExp() {
			return GetRuleContext<ParenthsExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpContext literalExp() {
			return GetRuleContext<LiteralExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__funcCallContext ppc__funcCall() {
			return GetRuleContext<Ppc__funcCallContext>(0);
		}
		public PrimaryExpValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExpVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExpVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpValContext primaryExpVal() {
		PrimaryExpValContext _localctx = new PrimaryExpValContext(Context, State);
		EnterRule(_localctx, 86, RULE_primaryExpVal);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				parenthsExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				funcCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 449;
				varRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 450;
				literalExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 451;
				ppc__funcCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC() { return GetToken(GrammarParser.OP_ACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(GrammarParser.OP_REF, 0); }
		public AccOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAccOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAccOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccOpContext accOp() {
		AccOpContext _localctx = new AccOpContext(Context, State);
		EnterRule(_localctx, 88, RULE_accOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ACC || _la==OP_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public FieldRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldRefContext fieldRef() {
		FieldRefContext _localctx = new FieldRefContext(Context, State);
		EnterRule(_localctx, 90, RULE_fieldRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthsExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		public ParenthsExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthsExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParenthsExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParenthsExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthsExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthsExpContext parenthsExp() {
		ParenthsExpContext _localctx = new ParenthsExpContext(Context, State);
		EnterRule(_localctx, 92, RULE_parenthsExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(PARN_OPN);
			State = 459;
			expression(0);
			State = 460;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_ALLOC() { return GetToken(GrammarParser.KYW_ALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AllocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alloc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlloc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocContext alloc() {
		AllocContext _localctx = new AllocContext(Context, State);
		EnterRule(_localctx, 94, RULE_alloc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(KYW_ALLOC);
			State = 463;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FREE() { return GetToken(GrammarParser.KYW_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_free; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeContext free() {
		FreeContext _localctx = new FreeContext(Context, State);
		EnterRule(_localctx, 96, RULE_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(KYW_FREE);
			State = 466;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		public ExplicitCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExplicitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExplicitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCastContext explicitCast() {
		ExplicitCastContext _localctx = new ExplicitCastContext(Context, State);
		EnterRule(_localctx, 98, RULE_explicitCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(PARN_OPN);
			State = 469;
			type();
			State = 470;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncRefContext funcRef() {
			return GetRuleContext<FuncRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 100, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			funcRef();
			State = 473;
			Match(PARN_OPN);
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152358552708185664L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 215L) != 0)) {
				{
				State = 474;
				funcParamVals();
				}
			}

			State = 477;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamValsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public FuncParamValsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParamVals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncParamVals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncParamVals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParamVals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamValsContext funcParamVals() {
		FuncParamValsContext _localctx = new FuncParamValsContext(Context, State);
		EnterRule(_localctx, 102, RULE_funcParamVals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			expression(0);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 480;
				Match(COMMA);
				State = 481;
				expression(0);
				}
				}
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public FuncRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncRefContext funcRef() {
		FuncRefContext _localctx = new FuncRefContext(Context, State);
		EnterRule(_localctx, 104, RULE_funcRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__varRefContext ppc__varRef() {
			return GetRuleContext<Ppc__varRefContext>(0);
		}
		public LiteralExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpContext literalExp() {
		LiteralExpContext _localctx = new LiteralExpContext(Context, State);
		EnterRule(_localctx, 106, RULE_literalExp);
		try {
			State = 495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				nullLiteral();
				}
				break;
			case OP_ADD:
			case OP_SUB:
			case INT_STR:
			case HEX_STR:
			case OCT_STR:
			case BIN_STR:
			case FLOAT_STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				numLiteral();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 491;
				strLiteral();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 492;
				charLiteral();
				}
				break;
			case KYW_TRUE:
			case KYW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 493;
				boolLiteral();
				}
				break;
			case PPC_ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 494;
				ppc__varRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_NULL() { return GetToken(GrammarParser.KYW_NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(KYW_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumSignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(GrammarParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(GrammarParser.OP_SUB, 0); }
		public NumSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numSign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumSignContext numSign() {
		NumSignContext _localctx = new NumSignContext(Context, State);
		EnterRule(_localctx, 110, RULE_numSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumSignContext numSign() {
			return GetRuleContext<NumSignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_numLiteral);
		int _la;
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_ADD:
			case OP_SUB:
			case INT_STR:
			case HEX_STR:
			case OCT_STR:
			case BIN_STR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OP_ADD || _la==OP_SUB) {
					{
					State = 501;
					numSign();
					}
				}

				State = 504;
				intLiteral();
				}
				break;
			case FLOAT_STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				floatLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntDecLiteralContext intDecLiteral() {
			return GetRuleContext<IntDecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntHexLiteralContext intHexLiteral() {
			return GetRuleContext<IntHexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntBinLiteralContext intBinLiteral() {
			return GetRuleContext<IntBinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntOctLiteralContext intOctLiteral() {
			return GetRuleContext<IntOctLiteralContext>(0);
		}
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_intLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_STR:
				{
				State = 508;
				intDecLiteral();
				}
				break;
			case HEX_STR:
				{
				State = 509;
				intHexLiteral();
				}
				break;
			case BIN_STR:
				{
				State = 510;
				intBinLiteral();
				}
				break;
			case OCT_STR:
				{
				State = 511;
				intOctLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntDecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_STR() { return GetToken(GrammarParser.INT_STR, 0); }
		public IntDecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intDecLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntDecLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntDecLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDecLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntDecLiteralContext intDecLiteral() {
		IntDecLiteralContext _localctx = new IntDecLiteralContext(Context, State);
		EnterRule(_localctx, 116, RULE_intDecLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(INT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntHexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_STR() { return GetToken(GrammarParser.HEX_STR, 0); }
		public IntHexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intHexLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntHexLiteralContext intHexLiteral() {
		IntHexLiteralContext _localctx = new IntHexLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_intHexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(HEX_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntBinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_STR() { return GetToken(GrammarParser.BIN_STR, 0); }
		public IntBinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intBinLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntBinLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntBinLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntBinLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntBinLiteralContext intBinLiteral() {
		IntBinLiteralContext _localctx = new IntBinLiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_intBinLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(BIN_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntOctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_STR() { return GetToken(GrammarParser.OCT_STR, 0); }
		public IntOctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intOctLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntOctLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntOctLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntOctLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntOctLiteralContext intOctLiteral() {
		IntOctLiteralContext _localctx = new IntOctLiteralContext(Context, State);
		EnterRule(_localctx, 122, RULE_intOctLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			Match(OCT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_STR() { return GetToken(GrammarParser.FLOAT_STR, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 124, RULE_floatLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(FLOAT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStrLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStrLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(GrammarParser.CHAR, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_TRUE() { return GetToken(GrammarParser.KYW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FALSE() { return GetToken(GrammarParser.KYW_FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_la = TokenStream.LA(1);
			if ( !(_la==KYW_TRUE || _la==KYW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 132, RULE_varRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_IF() { return GetToken(GrammarParser.KYW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(KYW_IF);
			State = 533;
			Match(PARN_OPN);
			State = 534;
			expression(0);
			State = 535;
			Match(PARN_CLS);
			State = 536;
			codeBody();
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 537;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_ELSE() { return GetToken(GrammarParser.KYW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(KYW_ELSE);
			State = 543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_IF:
				{
				State = 541;
				ifStatement();
				}
				break;
			case BODY_OPN:
				{
				State = 542;
				codeBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_RETURN() { return GetToken(GrammarParser.KYW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(KYW_RETURN);
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152358552708185664L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 215L) != 0)) {
				{
				State = 546;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_CONTINUE() { return GetToken(GrammarParser.KYW_CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(KYW_CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_BREAK() { return GetToken(GrammarParser.KYW_BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(KYW_BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public LoopDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLoopDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLoopDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopDeclContext loopDecl() {
		LoopDeclContext _localctx = new LoopDeclContext(Context, State);
		EnterRule(_localctx, 144, RULE_loopDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLoopCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLoopCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopCondContext loopCond() {
		LoopCondContext _localctx = new LoopCondContext(Context, State);
		EnterRule(_localctx, 146, RULE_loopCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEndExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEndExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpContext endExp() {
		EndExpContext _localctx = new EndExpContext(Context, State);
		EnterRule(_localctx, 148, RULE_endExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FOR() { return GetToken(GrammarParser.KYW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopDeclContext loopDecl() {
			return GetRuleContext<LoopDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopCondContext loopCond() {
			return GetRuleContext<LoopCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpContext endExp() {
			return GetRuleContext<EndExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 150, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(KYW_FOR);
			State = 560;
			Match(PARN_OPN);
			State = 561;
			loopDecl();
			State = 562;
			Match(EOS);
			State = 563;
			loopCond();
			State = 564;
			Match(EOS);
			State = 565;
			endExp();
			State = 566;
			Match(PARN_CLS);
			State = 567;
			codeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_WHILE() { return GetToken(GrammarParser.KYW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopCondContext loopCond() {
			return GetRuleContext<LoopCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 152, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(KYW_WHILE);
			State = 570;
			Match(PARN_OPN);
			State = 571;
			loopCond();
			State = 572;
			Match(PARN_CLS);
			State = 573;
			codeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_Code_BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_C_CODE() { return GetToken(GrammarParser.PPC_C_CODE, 0); }
		public Ppc__C_Code_BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Code_Body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Code_Body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Code_Body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Code_Body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_Code_BodyContext ppc__C_Code_Body() {
		Ppc__C_Code_BodyContext _localctx = new Ppc__C_Code_BodyContext(Context, State);
		EnterRule(_localctx, 154, RULE_ppc__C_Code_Body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(PPC_C_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Ppc__C_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_idContext ppc__C_id() {
		Ppc__C_idContext _localctx = new Ppc__C_idContext(Context, State);
		EnterRule(_localctx, 156, RULE_ppc__C_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_idContext ppc__C_id() {
			return GetRuleContext<Ppc__C_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public Ppc__C_FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_FuncContext ppc__C_Func() {
		Ppc__C_FuncContext _localctx = new Ppc__C_FuncContext(Context, State);
		EnterRule(_localctx, 158, RULE_ppc__C_Func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			ppc__C_id();
			State = 580;
			Match(PARN_OPN);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152358552708185664L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 215L) != 0)) {
				{
				State = 581;
				funcParamVals();
				}
			}

			State = 584;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_Func_MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_C_LAMDA() { return GetToken(GrammarParser.PPC_C_LAMDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_FuncContext ppc__C_Func() {
			return GetRuleContext<Ppc__C_FuncContext>(0);
		}
		public Ppc__C_Func_MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Func_Map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Func_Map(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Func_Map(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Func_Map(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_Func_MapContext ppc__C_Func_Map() {
		Ppc__C_Func_MapContext _localctx = new Ppc__C_Func_MapContext(Context, State);
		EnterRule(_localctx, 160, RULE_ppc__C_Func_Map);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(PPC_C_LAMDA);
			State = 587;
			ppc__C_Func();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__varRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_ID() { return GetToken(GrammarParser.PPC_ID, 0); }
		public Ppc__varRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__varRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__varRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__varRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__varRefContext ppc__varRef() {
		Ppc__varRefContext _localctx = new Ppc__varRefContext(Context, State);
		EnterRule(_localctx, 162, RULE_ppc__varRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(PPC_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__funcRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_ID() { return GetToken(GrammarParser.PPC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_DEEP_ID() { return GetToken(GrammarParser.PPC_DEEP_ID, 0); }
		public Ppc__funcRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__funcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__funcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__funcRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__funcRefContext ppc__funcRef() {
		Ppc__funcRefContext _localctx = new Ppc__funcRefContext(Context, State);
		EnterRule(_localctx, 164, RULE_ppc__funcRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.LA(1);
			if ( !(_la==PPC_ID || _la==PPC_DEEP_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__funcCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__funcRefContext ppc__funcRef() {
			return GetRuleContext<Ppc__funcRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public Ppc__funcCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__funcCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__funcCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__funcCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__funcCallContext ppc__funcCall() {
		Ppc__funcCallContext _localctx = new Ppc__funcCallContext(Context, State);
		EnterRule(_localctx, 166, RULE_ppc__funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ppc__funcRef();
			State = 594;
			Match(PARN_OPN);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152358552708185664L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 215L) != 0)) {
				{
				State = 595;
				funcParamVals();
				}
			}

			State = 598;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 40: return primaryExp_sempred((PrimaryExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primaryExp_sempred(PrimaryExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,601,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,5,0,170,
		8,0,10,0,12,0,173,9,0,1,0,1,0,1,1,4,1,178,8,1,11,1,12,1,179,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,192,8,3,1,4,1,4,1,5,1,5,1,5,1,5,5,5,
		200,8,5,10,5,12,5,203,9,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,3,9,
		215,8,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,223,8,9,10,9,12,9,226,9,9,3,9,228,
		8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,241,8,10,
		1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
		1,17,1,17,1,18,1,18,1,19,3,19,262,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		20,1,20,1,20,1,20,5,20,274,8,20,10,20,12,20,277,9,20,1,21,1,21,1,22,3,
		22,282,8,22,1,22,1,22,1,22,1,22,3,22,288,8,22,1,22,1,22,3,22,292,8,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,5,25,305,8,25,10,
		25,12,25,308,9,25,1,26,1,26,1,26,1,26,5,26,314,8,26,10,26,12,26,317,9,
		26,1,27,1,27,5,27,321,8,27,10,27,12,27,324,9,27,1,27,1,27,1,28,3,28,329,
		8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,351,8,28,1,29,3,29,354,8,29,1,
		29,1,29,1,29,1,29,5,29,360,8,29,10,29,12,29,363,9,29,1,30,1,30,1,30,3,
		30,368,8,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,
		395,8,32,10,32,12,32,398,9,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,416,8,37,1,38,1,38,1,39,1,
		39,1,40,1,40,1,40,3,40,425,8,40,1,40,1,40,1,40,1,40,3,40,431,8,40,1,40,
		1,40,1,40,1,40,5,40,437,8,40,10,40,12,40,440,9,40,1,41,1,41,1,41,1,42,
		1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,453,8,43,1,44,1,44,1,45,1,45,1,
		46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,
		50,1,50,1,50,3,50,476,8,50,1,50,1,50,1,51,1,51,1,51,5,51,483,8,51,10,51,
		12,51,486,9,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,496,8,53,1,
		54,1,54,1,55,1,55,1,56,3,56,503,8,56,1,56,1,56,3,56,507,8,56,1,57,1,57,
		1,57,1,57,3,57,513,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,
		62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,
		67,3,67,539,8,67,1,68,1,68,1,68,3,68,544,8,68,1,69,1,69,3,69,548,8,69,
		1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,
		1,78,1,78,1,79,1,79,1,79,3,79,583,8,79,1,79,1,79,1,80,1,80,1,80,1,81,1,
		81,1,82,1,82,1,83,1,83,1,83,3,83,597,8,83,1,83,1,83,1,83,0,2,64,80,84,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
		134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,0,
		9,1,0,68,69,1,0,25,27,1,0,28,29,1,0,30,34,1,0,35,42,1,0,20,21,1,0,44,45,
		1,0,6,7,1,0,70,71,587,0,171,1,0,0,0,2,177,1,0,0,0,4,181,1,0,0,0,6,191,
		1,0,0,0,8,193,1,0,0,0,10,195,1,0,0,0,12,206,1,0,0,0,14,209,1,0,0,0,16,
		211,1,0,0,0,18,214,1,0,0,0,20,231,1,0,0,0,22,242,1,0,0,0,24,245,1,0,0,
		0,26,247,1,0,0,0,28,250,1,0,0,0,30,252,1,0,0,0,32,254,1,0,0,0,34,256,1,
		0,0,0,36,258,1,0,0,0,38,261,1,0,0,0,40,275,1,0,0,0,42,278,1,0,0,0,44,281,
		1,0,0,0,46,297,1,0,0,0,48,299,1,0,0,0,50,301,1,0,0,0,52,315,1,0,0,0,54,
		318,1,0,0,0,56,328,1,0,0,0,58,353,1,0,0,0,60,364,1,0,0,0,62,369,1,0,0,
		0,64,371,1,0,0,0,66,399,1,0,0,0,68,401,1,0,0,0,70,403,1,0,0,0,72,405,1,
		0,0,0,74,415,1,0,0,0,76,417,1,0,0,0,78,419,1,0,0,0,80,430,1,0,0,0,82,441,
		1,0,0,0,84,444,1,0,0,0,86,452,1,0,0,0,88,454,1,0,0,0,90,456,1,0,0,0,92,
		458,1,0,0,0,94,462,1,0,0,0,96,465,1,0,0,0,98,468,1,0,0,0,100,472,1,0,0,
		0,102,479,1,0,0,0,104,487,1,0,0,0,106,495,1,0,0,0,108,497,1,0,0,0,110,
		499,1,0,0,0,112,506,1,0,0,0,114,512,1,0,0,0,116,514,1,0,0,0,118,516,1,
		0,0,0,120,518,1,0,0,0,122,520,1,0,0,0,124,522,1,0,0,0,126,524,1,0,0,0,
		128,526,1,0,0,0,130,528,1,0,0,0,132,530,1,0,0,0,134,532,1,0,0,0,136,540,
		1,0,0,0,138,545,1,0,0,0,140,549,1,0,0,0,142,551,1,0,0,0,144,553,1,0,0,
		0,146,555,1,0,0,0,148,557,1,0,0,0,150,559,1,0,0,0,152,569,1,0,0,0,154,
		575,1,0,0,0,156,577,1,0,0,0,158,579,1,0,0,0,160,586,1,0,0,0,162,589,1,
		0,0,0,164,591,1,0,0,0,166,593,1,0,0,0,168,170,3,6,3,0,169,168,1,0,0,0,
		170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,
		1,0,0,0,174,175,5,0,0,1,175,1,1,0,0,0,176,178,3,4,2,0,177,176,1,0,0,0,
		178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,3,1,0,0,0,181,182,
		5,67,0,0,182,5,1,0,0,0,183,184,3,2,1,0,184,185,5,59,0,0,185,192,1,0,0,
		0,186,187,3,16,8,0,187,188,5,59,0,0,188,192,1,0,0,0,189,192,3,20,10,0,
		190,192,3,38,19,0,191,183,1,0,0,0,191,186,1,0,0,0,191,189,1,0,0,0,191,
		190,1,0,0,0,192,7,1,0,0,0,193,194,3,12,6,0,194,9,1,0,0,0,195,196,5,39,
		0,0,196,201,5,68,0,0,197,198,5,26,0,0,198,200,5,68,0,0,199,197,1,0,0,0,
		200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,
		1,0,0,0,204,205,5,40,0,0,205,11,1,0,0,0,206,207,5,1,0,0,207,208,3,10,5,
		0,208,13,1,0,0,0,209,210,7,0,0,0,210,15,1,0,0,0,211,212,3,58,29,0,212,
		17,1,0,0,0,213,215,3,2,1,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,1,0,
		0,0,216,217,3,24,12,0,217,218,3,30,15,0,218,227,5,49,0,0,219,224,3,26,
		13,0,220,221,5,46,0,0,221,223,3,26,13,0,222,220,1,0,0,0,223,226,1,0,0,
		0,224,222,1,0,0,0,224,225,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,227,
		219,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,5,50,0,0,230,19,1,
		0,0,0,231,240,3,18,9,0,232,241,3,54,27,0,233,234,3,22,11,0,234,235,5,59,
		0,0,235,241,1,0,0,0,236,241,3,154,77,0,237,238,3,160,80,0,238,239,5,59,
		0,0,239,241,1,0,0,0,240,232,1,0,0,0,240,233,1,0,0,0,240,236,1,0,0,0,240,
		237,1,0,0,0,241,21,1,0,0,0,242,243,5,43,0,0,243,244,3,64,32,0,244,23,1,
		0,0,0,245,246,3,14,7,0,246,25,1,0,0,0,247,248,3,14,7,0,248,249,3,28,14,
		0,249,27,1,0,0,0,250,251,5,68,0,0,251,29,1,0,0,0,252,253,5,68,0,0,253,
		31,1,0,0,0,254,255,5,68,0,0,255,33,1,0,0,0,256,257,3,58,29,0,257,35,1,
		0,0,0,258,259,5,68,0,0,259,37,1,0,0,0,260,262,3,2,1,0,261,260,1,0,0,0,
		261,262,1,0,0,0,262,263,1,0,0,0,263,264,5,2,0,0,264,265,3,36,18,0,265,
		266,5,47,0,0,266,267,3,40,20,0,267,268,5,48,0,0,268,39,1,0,0,0,269,274,
		3,20,10,0,270,271,3,34,17,0,271,272,5,59,0,0,272,274,1,0,0,0,273,269,1,
		0,0,0,273,270,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,
		276,41,1,0,0,0,277,275,1,0,0,0,278,279,5,68,0,0,279,43,1,0,0,0,280,282,
		3,2,1,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,5,4,0,
		0,284,287,3,42,21,0,285,286,5,44,0,0,286,288,3,46,23,0,287,285,1,0,0,0,
		287,288,1,0,0,0,288,291,1,0,0,0,289,290,5,3,0,0,290,292,3,50,25,0,291,
		289,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,5,47,0,0,294,295,3,
		52,26,0,295,296,5,48,0,0,296,45,1,0,0,0,297,298,5,68,0,0,298,47,1,0,0,
		0,299,300,5,68,0,0,300,49,1,0,0,0,301,306,3,48,24,0,302,303,5,46,0,0,303,
		305,3,48,24,0,304,302,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,
		1,0,0,0,307,51,1,0,0,0,308,306,1,0,0,0,309,314,3,20,10,0,310,311,3,34,
		17,0,311,312,5,59,0,0,312,314,1,0,0,0,313,309,1,0,0,0,313,310,1,0,0,0,
		314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,53,1,0,0,0,317,315,
		1,0,0,0,318,322,5,47,0,0,319,321,3,56,28,0,320,319,1,0,0,0,321,324,1,0,
		0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,
		326,5,48,0,0,326,55,1,0,0,0,327,329,3,2,1,0,328,327,1,0,0,0,328,329,1,
		0,0,0,329,350,1,0,0,0,330,331,3,58,29,0,331,332,5,59,0,0,332,351,1,0,0,
		0,333,334,3,62,31,0,334,335,5,59,0,0,335,351,1,0,0,0,336,351,3,150,75,
		0,337,338,3,142,71,0,338,339,5,59,0,0,339,351,1,0,0,0,340,341,3,140,70,
		0,341,342,5,59,0,0,342,351,1,0,0,0,343,344,3,138,69,0,344,345,5,59,0,0,
		345,351,1,0,0,0,346,347,3,96,48,0,347,348,5,59,0,0,348,351,1,0,0,0,349,
		351,3,2,1,0,350,330,1,0,0,0,350,333,1,0,0,0,350,336,1,0,0,0,350,337,1,
		0,0,0,350,340,1,0,0,0,350,343,1,0,0,0,350,346,1,0,0,0,350,349,1,0,0,0,
		351,57,1,0,0,0,352,354,3,2,1,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,
		1,0,0,0,355,356,3,14,7,0,356,361,3,60,30,0,357,358,5,46,0,0,358,360,3,
		60,30,0,359,357,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,
		0,362,59,1,0,0,0,363,361,1,0,0,0,364,367,3,32,16,0,365,366,5,19,0,0,366,
		368,3,64,32,0,367,365,1,0,0,0,367,368,1,0,0,0,368,61,1,0,0,0,369,370,3,
		64,32,0,370,63,1,0,0,0,371,372,6,32,-1,0,372,373,3,80,40,0,373,396,1,0,
		0,0,374,375,10,5,0,0,375,376,3,66,33,0,376,377,3,64,32,6,377,395,1,0,0,
		0,378,379,10,4,0,0,379,380,3,68,34,0,380,381,3,64,32,5,381,395,1,0,0,0,
		382,383,10,3,0,0,383,384,3,70,35,0,384,385,3,64,32,4,385,395,1,0,0,0,386,
		387,10,2,0,0,387,388,3,72,36,0,388,389,3,64,32,3,389,395,1,0,0,0,390,391,
		10,1,0,0,391,392,3,78,39,0,392,393,3,64,32,2,393,395,1,0,0,0,394,374,1,
		0,0,0,394,378,1,0,0,0,394,382,1,0,0,0,394,386,1,0,0,0,394,390,1,0,0,0,
		395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,65,1,0,0,0,398,396,
		1,0,0,0,399,400,7,1,0,0,400,67,1,0,0,0,401,402,7,2,0,0,402,69,1,0,0,0,
		403,404,7,3,0,0,404,71,1,0,0,0,405,406,7,4,0,0,406,73,1,0,0,0,407,416,
		5,21,0,0,408,416,5,20,0,0,409,416,5,23,0,0,410,416,5,22,0,0,411,416,5,
		24,0,0,412,416,5,30,0,0,413,416,5,25,0,0,414,416,3,98,49,0,415,407,1,0,
		0,0,415,408,1,0,0,0,415,409,1,0,0,0,415,410,1,0,0,0,415,411,1,0,0,0,415,
		412,1,0,0,0,415,413,1,0,0,0,415,414,1,0,0,0,416,75,1,0,0,0,417,418,7,5,
		0,0,418,77,1,0,0,0,419,420,5,19,0,0,420,79,1,0,0,0,421,422,6,40,-1,0,422,
		424,3,86,43,0,423,425,3,76,38,0,424,423,1,0,0,0,424,425,1,0,0,0,425,431,
		1,0,0,0,426,427,3,74,37,0,427,428,3,86,43,0,428,431,1,0,0,0,429,431,3,
		94,47,0,430,421,1,0,0,0,430,426,1,0,0,0,430,429,1,0,0,0,431,438,1,0,0,
		0,432,433,10,3,0,0,433,437,3,82,41,0,434,435,10,2,0,0,435,437,3,84,42,
		0,436,432,1,0,0,0,436,434,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,
		439,1,0,0,0,439,81,1,0,0,0,440,438,1,0,0,0,441,442,3,88,44,0,442,443,3,
		100,50,0,443,83,1,0,0,0,444,445,3,88,44,0,445,446,3,90,45,0,446,85,1,0,
		0,0,447,453,3,92,46,0,448,453,3,100,50,0,449,453,3,132,66,0,450,453,3,
		106,53,0,451,453,3,166,83,0,452,447,1,0,0,0,452,448,1,0,0,0,452,449,1,
		0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,87,1,0,0,0,454,455,7,6,0,0,455,
		89,1,0,0,0,456,457,3,132,66,0,457,91,1,0,0,0,458,459,5,49,0,0,459,460,
		3,64,32,0,460,461,5,50,0,0,461,93,1,0,0,0,462,463,5,17,0,0,463,464,3,14,
		7,0,464,95,1,0,0,0,465,466,5,16,0,0,466,467,3,64,32,0,467,97,1,0,0,0,468,
		469,5,49,0,0,469,470,3,14,7,0,470,471,5,50,0,0,471,99,1,0,0,0,472,473,
		3,104,52,0,473,475,5,49,0,0,474,476,3,102,51,0,475,474,1,0,0,0,475,476,
		1,0,0,0,476,477,1,0,0,0,477,478,5,50,0,0,478,101,1,0,0,0,479,484,3,64,
		32,0,480,481,5,46,0,0,481,483,3,64,32,0,482,480,1,0,0,0,483,486,1,0,0,
		0,484,482,1,0,0,0,484,485,1,0,0,0,485,103,1,0,0,0,486,484,1,0,0,0,487,
		488,3,132,66,0,488,105,1,0,0,0,489,496,3,108,54,0,490,496,3,112,56,0,491,
		496,3,126,63,0,492,496,3,128,64,0,493,496,3,130,65,0,494,496,3,162,81,
		0,495,489,1,0,0,0,495,490,1,0,0,0,495,491,1,0,0,0,495,492,1,0,0,0,495,
		493,1,0,0,0,495,494,1,0,0,0,496,107,1,0,0,0,497,498,5,8,0,0,498,109,1,
		0,0,0,499,500,7,2,0,0,500,111,1,0,0,0,501,503,3,110,55,0,502,501,1,0,0,
		0,502,503,1,0,0,0,503,504,1,0,0,0,504,507,3,114,57,0,505,507,3,124,62,
		0,506,502,1,0,0,0,506,505,1,0,0,0,507,113,1,0,0,0,508,513,3,116,58,0,509,
		513,3,118,59,0,510,513,3,120,60,0,511,513,3,122,61,0,512,508,1,0,0,0,512,
		509,1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,115,1,0,0,0,514,515,5,
		60,0,0,515,117,1,0,0,0,516,517,5,61,0,0,517,119,1,0,0,0,518,519,5,63,0,
		0,519,121,1,0,0,0,520,521,5,62,0,0,521,123,1,0,0,0,522,523,5,64,0,0,523,
		125,1,0,0,0,524,525,5,66,0,0,525,127,1,0,0,0,526,527,5,65,0,0,527,129,
		1,0,0,0,528,529,7,7,0,0,529,131,1,0,0,0,530,531,5,68,0,0,531,133,1,0,0,
		0,532,533,5,9,0,0,533,534,5,49,0,0,534,535,3,64,32,0,535,536,5,50,0,0,
		536,538,3,54,27,0,537,539,3,136,68,0,538,537,1,0,0,0,538,539,1,0,0,0,539,
		135,1,0,0,0,540,543,5,10,0,0,541,544,3,134,67,0,542,544,3,54,27,0,543,
		541,1,0,0,0,543,542,1,0,0,0,544,137,1,0,0,0,545,547,5,13,0,0,546,548,3,
		64,32,0,547,546,1,0,0,0,547,548,1,0,0,0,548,139,1,0,0,0,549,550,5,15,0,
		0,550,141,1,0,0,0,551,552,5,14,0,0,552,143,1,0,0,0,553,554,3,58,29,0,554,
		145,1,0,0,0,555,556,3,64,32,0,556,147,1,0,0,0,557,558,3,64,32,0,558,149,
		1,0,0,0,559,560,5,11,0,0,560,561,5,49,0,0,561,562,3,144,72,0,562,563,5,
		59,0,0,563,564,3,146,73,0,564,565,5,59,0,0,565,566,3,148,74,0,566,567,
		5,50,0,0,567,568,3,54,27,0,568,151,1,0,0,0,569,570,5,12,0,0,570,571,5,
		49,0,0,571,572,3,146,73,0,572,573,5,50,0,0,573,574,3,54,27,0,574,153,1,
		0,0,0,575,576,5,55,0,0,576,155,1,0,0,0,577,578,5,68,0,0,578,157,1,0,0,
		0,579,580,3,156,78,0,580,582,5,49,0,0,581,583,3,102,51,0,582,581,1,0,0,
		0,582,583,1,0,0,0,583,584,1,0,0,0,584,585,5,50,0,0,585,159,1,0,0,0,586,
		587,5,56,0,0,587,588,3,158,79,0,588,161,1,0,0,0,589,590,5,70,0,0,590,163,
		1,0,0,0,591,592,7,8,0,0,592,165,1,0,0,0,593,594,3,164,82,0,594,596,5,49,
		0,0,595,597,3,102,51,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,
		598,599,5,50,0,0,599,167,1,0,0,0,42,171,179,191,201,214,224,227,240,261,
		273,275,281,287,291,306,313,315,322,328,350,353,361,367,394,396,415,424,
		430,436,438,452,475,484,495,502,506,512,538,543,547,582,596
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
