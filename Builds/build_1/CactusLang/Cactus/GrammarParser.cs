//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/warehouse/BME/sem6/onlab/cactus_project/Builds/build_1/Grammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KYW_INCLUDE=1, KYW_STRUCT=2, KYW_CLASS=3, KYW_IMPLEMENTS=4, KYW_TRUE=5, 
		KYW_FALSE=6, KYW_NULL=7, KYW_IF=8, KYW_ELSE=9, KYW_FOR=10, KYW_WHILE=11, 
		KYW_RETURN=12, KYW_BREAK=13, KYW_CONTINUE=14, KYW_FREE=15, KYW_ALLOC=16, 
		TAG_PRFX=17, UNOP_INC=18, UNOP_DCR=19, LUNOP_L_NOT=20, LUNOP_B_NOT=21, 
		LUNOP_SIZEOF=22, OP_ASG=23, OP_STAR=24, OP_DIV=25, OP_REM=26, OP_ADD=27, 
		OP_SUB=28, OP_AND=29, OP_B_OR=30, OP_B_XOR=31, OP_LSH=32, OP_RSH=33, OP_EQL=34, 
		OP_L_AND=35, OP_L_OR=36, OP_NEQ=37, OP_LST=38, OP_GRT=39, OP_LSEQ=40, 
		OP_GREQ=41, OP_LAMDA=42, OP_ACC=43, OP_REF=44, COMMA=45, BODY_OPN=46, 
		BODY_CLS=47, PARN_OPN=48, PARN_CLS=49, SQPN_OPN=50, SQPN_CLS=51, PPC_C_BODY_OPN=52, 
		PPC_C_BODY_CLS=53, PPC_C_CODE=54, PPC_C_LAMDA=55, S_QT=56, D_QT=57, EOS=58, 
		INT_STR=59, HEX_STR=60, OCT_STR=61, BIN_STR=62, CHAR=63, STRING=64, TAG=65, 
		ID=66, PPC_ID=67, PPC_DEEP_ID=68, COMMENT=69, LINE_COMMENT=70, WHITESPACE=71, 
		NEWLINE=72;
	public const int
		RULE_codefile = 0, RULE_tags = 1, RULE_globStatement = 2, RULE_preprocessor_stm = 3, 
		RULE_filepath = 4, RULE_ppc__Include = 5, RULE_ptrLvl = 6, RULE_type = 7, 
		RULE_globVarDcl = 8, RULE_funcDclHeader = 9, RULE_funcDcl = 10, RULE_funcLamdBody = 11, 
		RULE_returnType = 12, RULE_param = 13, RULE_paramName = 14, RULE_funcName = 15, 
		RULE_varName = 16, RULE_fieldDcl = 17, RULE_structName = 18, RULE_structDcl = 19, 
		RULE_structBody = 20, RULE_className = 21, RULE_classDcl = 22, RULE_parentClass = 23, 
		RULE_interface = 24, RULE_interfaces = 25, RULE_classBody = 26, RULE_codeBody = 27, 
		RULE_statement = 28, RULE_varDcl = 29, RULE_varDclBody = 30, RULE_expression = 31, 
		RULE_opMultLvl = 32, RULE_opAddLvl = 33, RULE_opBitLvl = 34, RULE_opCompLvl = 35, 
		RULE_primaryExp = 36, RULE_opLeftUn = 37, RULE_opRightUn = 38, RULE_primaryExpVal = 39, 
		RULE_parenthsExp = 40, RULE_miscPrimeExp = 41, RULE_alloc = 42, RULE_free = 43, 
		RULE_explicitCast = 44, RULE_assignment = 45, RULE_funcCall = 46, RULE_funcParamVals = 47, 
		RULE_funcRef = 48, RULE_literalExp = 49, RULE_nullLiteral = 50, RULE_numSign = 51, 
		RULE_numLiteral = 52, RULE_intLiteral = 53, RULE_intDecLiteral = 54, RULE_intHexLiteral = 55, 
		RULE_intBinLiteral = 56, RULE_intOctLiteral = 57, RULE_floatLiteral = 58, 
		RULE_strLiteral = 59, RULE_charLiteral = 60, RULE_boolLiteral = 61, RULE_varRef = 62, 
		RULE_ifStatement = 63, RULE_elseStatement = 64, RULE_returnStatement = 65, 
		RULE_continueStatement = 66, RULE_breakStatement = 67, RULE_loopDecl = 68, 
		RULE_loopCond = 69, RULE_endExp = 70, RULE_forLoop = 71, RULE_whileLoop = 72, 
		RULE_ppc__C_Code_Body = 73, RULE_ppc__C_id = 74, RULE_ppc__C_Func = 75, 
		RULE_ppc__C_Func_Map = 76, RULE_ppc__varRef = 77, RULE_ppc__funcRef = 78, 
		RULE_ppc__funcCall = 79, RULE_ppc__Token = 80;
	public static readonly string[] ruleNames = {
		"codefile", "tags", "globStatement", "preprocessor_stm", "filepath", "ppc__Include", 
		"ptrLvl", "type", "globVarDcl", "funcDclHeader", "funcDcl", "funcLamdBody", 
		"returnType", "param", "paramName", "funcName", "varName", "fieldDcl", 
		"structName", "structDcl", "structBody", "className", "classDcl", "parentClass", 
		"interface", "interfaces", "classBody", "codeBody", "statement", "varDcl", 
		"varDclBody", "expression", "opMultLvl", "opAddLvl", "opBitLvl", "opCompLvl", 
		"primaryExp", "opLeftUn", "opRightUn", "primaryExpVal", "parenthsExp", 
		"miscPrimeExp", "alloc", "free", "explicitCast", "assignment", "funcCall", 
		"funcParamVals", "funcRef", "literalExp", "nullLiteral", "numSign", "numLiteral", 
		"intLiteral", "intDecLiteral", "intHexLiteral", "intBinLiteral", "intOctLiteral", 
		"floatLiteral", "strLiteral", "charLiteral", "boolLiteral", "varRef", 
		"ifStatement", "elseStatement", "returnStatement", "continueStatement", 
		"breakStatement", "loopDecl", "loopCond", "endExp", "forLoop", "whileLoop", 
		"ppc__C_Code_Body", "ppc__C_id", "ppc__C_Func", "ppc__C_Func_Map", "ppc__varRef", 
		"ppc__funcRef", "ppc__funcCall", "ppc__Token"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'struct'", "'class'", "'implements'", "'true'", "'false'", 
		"'nullptr'", "'if'", "'else'", "'for'", "'while'", "'return'", "'break'", 
		"'continue'", "'free'", "'alloc'", "'@'", "'++'", "'--'", "'!'", "'~'", 
		"'sizeof'", "'='", "'*'", null, "'%'", "'+'", "'-'", "'&'", "'|'", "'^'", 
		"'<<'", "'>>'", "'=='", "'&&'", "'||'", "'!='", "'<'", "'>'", "'<='", 
		"'>='", "'=>'", "':'", "'.'", "','", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", null, null, null, null, "'''", "'\"'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KYW_INCLUDE", "KYW_STRUCT", "KYW_CLASS", "KYW_IMPLEMENTS", "KYW_TRUE", 
		"KYW_FALSE", "KYW_NULL", "KYW_IF", "KYW_ELSE", "KYW_FOR", "KYW_WHILE", 
		"KYW_RETURN", "KYW_BREAK", "KYW_CONTINUE", "KYW_FREE", "KYW_ALLOC", "TAG_PRFX", 
		"UNOP_INC", "UNOP_DCR", "LUNOP_L_NOT", "LUNOP_B_NOT", "LUNOP_SIZEOF", 
		"OP_ASG", "OP_STAR", "OP_DIV", "OP_REM", "OP_ADD", "OP_SUB", "OP_AND", 
		"OP_B_OR", "OP_B_XOR", "OP_LSH", "OP_RSH", "OP_EQL", "OP_L_AND", "OP_L_OR", 
		"OP_NEQ", "OP_LST", "OP_GRT", "OP_LSEQ", "OP_GREQ", "OP_LAMDA", "OP_ACC", 
		"OP_REF", "COMMA", "BODY_OPN", "BODY_CLS", "PARN_OPN", "PARN_CLS", "SQPN_OPN", 
		"SQPN_CLS", "PPC_C_BODY_OPN", "PPC_C_BODY_CLS", "PPC_C_CODE", "PPC_C_LAMDA", 
		"S_QT", "D_QT", "EOS", "INT_STR", "HEX_STR", "OCT_STR", "BIN_STR", "CHAR", 
		"STRING", "TAG", "ID", "PPC_ID", "PPC_DEEP_ID", "COMMENT", "LINE_COMMENT", 
		"WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodefileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobStatementContext[] globStatement() {
			return GetRuleContexts<GlobStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobStatementContext globStatement(int i) {
			return GetRuleContext<GlobStatementContext>(i);
		}
		public CodefileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codefile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCodefile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodefile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodefileContext codefile() {
		CodefileContext _localctx = new CodefileContext(Context, State);
		EnterRule(_localctx, 0, RULE_codefile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0) || _la==TAG || _la==ID) {
				{
				{
				State = 162;
				globStatement();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(GrammarParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(GrammarParser.TAG, i);
		}
		public TagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tags; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTags(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTags(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagsContext tags() {
		TagsContext _localctx = new TagsContext(Context, State);
		EnterRule(_localctx, 2, RULE_tags);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 170;
					Match(TAG);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_stmContext preprocessor_stm() {
			return GetRuleContext<Preprocessor_stmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobVarDclContext globVarDcl() {
			return GetRuleContext<GlobVarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDclContext structDcl() {
			return GetRuleContext<StructDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDclContext classDcl() {
			return GetRuleContext<ClassDclContext>(0);
		}
		public GlobStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGlobStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGlobStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobStatementContext globStatement() {
		GlobStatementContext _localctx = new GlobStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_globStatement);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 175;
				preprocessor_stm();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 176;
				globVarDcl();
				State = 177;
				Match(EOS);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 179;
				funcDcl();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 180;
				structDcl();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 181;
				classDcl();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_stmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__IncludeContext ppc__Include() {
			return GetRuleContext<Ppc__IncludeContext>(0);
		}
		public Preprocessor_stmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_stm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPreprocessor_stm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPreprocessor_stm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_stm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_stmContext preprocessor_stm() {
		Preprocessor_stmContext _localctx = new Preprocessor_stmContext(Context, State);
		EnterRule(_localctx, 6, RULE_preprocessor_stm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 184;
			ppc__Include();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilepathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_DIV() { return GetTokens(GrammarParser.OP_DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV(int i) {
			return GetToken(GrammarParser.OP_DIV, i);
		}
		public FilepathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filepath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFilepath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFilepath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilepath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilepathContext filepath() {
		FilepathContext _localctx = new FilepathContext(Context, State);
		EnterRule(_localctx, 8, RULE_filepath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(OP_LST);
			State = 187;
			Match(ID);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_DIV) {
				{
				{
				State = 188;
				Match(OP_DIV);
				State = 189;
				Match(ID);
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			Match(OP_GRT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_INCLUDE() { return GetToken(GrammarParser.KYW_INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilepathContext filepath() {
			return GetRuleContext<FilepathContext>(0);
		}
		public Ppc__IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__Include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__Include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__Include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__Include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__IncludeContext ppc__Include() {
		Ppc__IncludeContext _localctx = new Ppc__IncludeContext(Context, State);
		EnterRule(_localctx, 10, RULE_ppc__Include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(KYW_INCLUDE);
			State = 198;
			filepath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_STAR() { return GetTokens(GrammarParser.OP_STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_STAR(int i) {
			return GetToken(GrammarParser.OP_STAR, i);
		}
		public PtrLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPtrLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPtrLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrLvlContext ptrLvl() {
		PtrLvlContext _localctx = new PtrLvlContext(Context, State);
		EnterRule(_localctx, 12, RULE_ptrLvl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 200;
					Match(OP_STAR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PtrLvlContext ptrLvl() {
			return GetRuleContext<PtrLvlContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(ID);
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 206;
				ptrLvl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobVarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public GlobVarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globVarDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGlobVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGlobVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobVarDclContext globVarDcl() {
		GlobVarDclContext _localctx = new GlobVarDclContext(Context, State);
		EnterRule(_localctx, 16, RULE_globVarDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncNameContext funcName() {
			return GetRuleContext<FuncNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public FuncDclHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDclHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncDclHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncDclHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDclHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclHeaderContext funcDclHeader() {
		FuncDclHeaderContext _localctx = new FuncDclHeaderContext(Context, State);
		EnterRule(_localctx, 18, RULE_funcDclHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 211;
				tags();
				}
			}

			State = 214;
			returnType();
			State = 215;
			funcName();
			State = 216;
			Match(PARN_OPN);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 217;
				param();
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 218;
					Match(COMMA);
					State = 219;
					param();
					}
					}
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 227;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclHeaderContext funcDclHeader() {
			return GetRuleContext<FuncDclHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncLamdBodyContext funcLamdBody() {
			return GetRuleContext<FuncLamdBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_Code_BodyContext ppc__C_Code_Body() {
			return GetRuleContext<Ppc__C_Code_BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_Func_MapContext ppc__C_Func_Map() {
			return GetRuleContext<Ppc__C_Func_MapContext>(0);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			funcDclHeader();
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BODY_OPN:
				{
				State = 230;
				codeBody();
				}
				break;
			case OP_LAMDA:
				{
				State = 231;
				funcLamdBody();
				State = 232;
				Match(EOS);
				}
				break;
			case PPC_C_CODE:
				{
				State = 234;
				ppc__C_Code_Body();
				}
				break;
			case PPC_C_LAMDA:
				{
				State = 235;
				ppc__C_Func_Map();
				State = 236;
				Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncLamdBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMDA() { return GetToken(GrammarParser.OP_LAMDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FuncLamdBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcLamdBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncLamdBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncLamdBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLamdBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncLamdBodyContext funcLamdBody() {
		FuncLamdBodyContext _localctx = new FuncLamdBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_funcLamdBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(OP_LAMDA);
			State = 241;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamNameContext paramName() {
			return GetRuleContext<ParamNameContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 26, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			type();
			State = 246;
			paramName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ParamNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamNameContext paramName() {
		ParamNameContext _localctx = new ParamNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_paramName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public FuncNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncNameContext funcName() {
		FuncNameContext _localctx = new FuncNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public FieldDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDclContext fieldDcl() {
		FieldDclContext _localctx = new FieldDclContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_STRUCT() { return GetToken(GrammarParser.KYW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public StructDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDclContext structDcl() {
		StructDclContext _localctx = new StructDclContext(Context, State);
		EnterRule(_localctx, 38, RULE_structDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 258;
				tags();
				}
			}

			State = 261;
			Match(KYW_STRUCT);
			State = 262;
			structName();
			State = 263;
			Match(BODY_OPN);
			State = 264;
			structBody();
			State = 265;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext[] funcDcl() {
			return GetRuleContexts<FuncDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl(int i) {
			return GetRuleContext<FuncDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext[] fieldDcl() {
			return GetRuleContexts<FieldDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext fieldDcl(int i) {
			return GetRuleContext<FieldDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_structBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG || _la==ID) {
				{
				State = 271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 267;
					funcDcl();
					}
					break;
				case 2:
					{
					{
					State = 268;
					fieldDcl();
					State = 269;
					Match(EOS);
					}
					}
					break;
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_CLASS() { return GetToken(GrammarParser.KYW_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC() { return GetToken(GrammarParser.OP_ACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParentClassContext parentClass() {
			return GetRuleContext<ParentClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_IMPLEMENTS() { return GetToken(GrammarParser.KYW_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesContext interfaces() {
			return GetRuleContext<InterfacesContext>(0);
		}
		public ClassDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClassDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClassDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDclContext classDcl() {
		ClassDclContext _localctx = new ClassDclContext(Context, State);
		EnterRule(_localctx, 44, RULE_classDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 278;
				tags();
				}
			}

			State = 281;
			Match(KYW_CLASS);
			State = 282;
			className();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ACC) {
				{
				State = 283;
				Match(OP_ACC);
				State = 284;
				parentClass();
				}
			}

			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KYW_IMPLEMENTS) {
				{
				State = 287;
				Match(KYW_IMPLEMENTS);
				State = 288;
				interfaces();
				}
			}

			State = 291;
			Match(BODY_OPN);
			State = 292;
			classBody();
			State = 293;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ParentClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParentClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParentClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentClassContext parentClass() {
		ParentClassContext _localctx = new ParentClassContext(Context, State);
		EnterRule(_localctx, 46, RULE_parentClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 48, RULE_interface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public InterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesContext interfaces() {
		InterfacesContext _localctx = new InterfacesContext(Context, State);
		EnterRule(_localctx, 50, RULE_interfaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			@interface();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 300;
				Match(COMMA);
				State = 301;
				@interface();
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext[] funcDcl() {
			return GetRuleContexts<FuncDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl(int i) {
			return GetRuleContext<FuncDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext[] fieldDcl() {
			return GetRuleContexts<FieldDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDclContext fieldDcl(int i) {
			return GetRuleContext<FieldDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG || _la==ID) {
				{
				State = 311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 307;
					funcDcl();
					}
					break;
				case 2:
					{
					{
					State = 308;
					fieldDcl();
					State = 309;
					Match(EOS);
					}
					}
					break;
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_OPN() { return GetToken(GrammarParser.BODY_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_CLS() { return GetToken(GrammarParser.BODY_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCodeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCodeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBodyContext codeBody() {
		CodeBodyContext _localctx = new CodeBodyContext(Context, State);
		EnterRule(_localctx, 54, RULE_codeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(BODY_OPN);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & -18005052631027729L) != 0)) {
				{
				{
				State = 317;
				statement();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 323;
			Match(BODY_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GrammarParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_statement);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				varDcl();
				State = 326;
				Match(EOS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				expression(0);
				State = 329;
				Match(EOS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 333;
				whileLoop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 334;
				breakStatement();
				State = 335;
				Match(EOS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 337;
				continueStatement();
				State = 338;
				Match(EOS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 340;
				returnStatement();
				State = 341;
				Match(EOS);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 343;
				tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDclBodyContext[] varDclBody() {
			return GetRuleContexts<VarDclBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDclBodyContext varDclBody(int i) {
			return GetRuleContext<VarDclBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 58, RULE_varDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG) {
				{
				State = 346;
				tags();
				}
			}

			State = 349;
			type();
			State = 350;
			varDclBody();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 351;
				Match(COMMA);
				State = 352;
				varDclBody();
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(GrammarParser.OP_ASG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDclBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarDclBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarDclBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDclBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclBodyContext varDclBody() {
		VarDclBodyContext _localctx = new VarDclBodyContext(Context, State);
		EnterRule(_localctx, 60, RULE_varDclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			varName();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASG) {
				{
				State = 359;
				Match(OP_ASG);
				State = 360;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpContext primaryExp() {
			return GetRuleContext<PrimaryExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpMultLvlContext opMultLvl() {
			return GetRuleContext<OpMultLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpAddLvlContext opAddLvl() {
			return GetRuleContext<OpAddLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBitLvlContext opBitLvl() {
			return GetRuleContext<OpBitLvlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpCompLvlContext opCompLvl() {
			return GetRuleContext<OpCompLvlContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 364;
			primaryExp();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 384;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 382;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 366;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 367;
						opMultLvl();
						State = 368;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 370;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 371;
						opAddLvl();
						State = 372;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 374;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 375;
						opBitLvl();
						State = 376;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 378;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 379;
						opCompLvl();
						State = 380;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpMultLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_STAR() { return GetToken(GrammarParser.OP_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(GrammarParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REM() { return GetToken(GrammarParser.OP_REM, 0); }
		public OpMultLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMultLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpMultLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpMultLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMultLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpMultLvlContext opMultLvl() {
		OpMultLvlContext _localctx = new OpMultLvlContext(Context, State);
		EnterRule(_localctx, 64, RULE_opMultLvl);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_TRUE:
			case KYW_FALSE:
			case KYW_NULL:
			case KYW_FREE:
			case KYW_ALLOC:
			case UNOP_INC:
			case UNOP_DCR:
			case LUNOP_L_NOT:
			case LUNOP_B_NOT:
			case LUNOP_SIZEOF:
			case OP_ADD:
			case OP_SUB:
			case OP_AND:
			case OP_REF:
			case PARN_OPN:
			case INT_STR:
			case HEX_STR:
			case OCT_STR:
			case BIN_STR:
			case CHAR:
			case STRING:
			case ID:
			case PPC_ID:
			case PPC_DEEP_ID:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OP_STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(OP_STAR);
				}
				break;
			case OP_DIV:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				Match(OP_DIV);
				}
				break;
			case OP_REM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390;
				Match(OP_REM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAddLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(GrammarParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(GrammarParser.OP_SUB, 0); }
		public OpAddLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAddLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpAddLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpAddLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAddLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAddLvlContext opAddLvl() {
		OpAddLvlContext _localctx = new OpAddLvlContext(Context, State);
		EnterRule(_localctx, 66, RULE_opAddLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpBitLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(GrammarParser.OP_B_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_XOR() { return GetToken(GrammarParser.OP_B_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSH() { return GetToken(GrammarParser.OP_LSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSH() { return GetToken(GrammarParser.OP_RSH, 0); }
		public OpBitLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opBitLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpBitLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpBitLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBitLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpBitLvlContext opBitLvl() {
		OpBitLvlContext _localctx = new OpBitLvlContext(Context, State);
		EnterRule(_localctx, 68, RULE_opBitLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16642998272L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCompLvlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQL() { return GetToken(GrammarParser.OP_EQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEQ() { return GetToken(GrammarParser.OP_NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(GrammarParser.OP_B_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREQ() { return GetToken(GrammarParser.OP_GREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSEQ() { return GetToken(GrammarParser.OP_LSEQ, 0); }
		public OpCompLvlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCompLvl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpCompLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpCompLvl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCompLvl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCompLvlContext opCompLvl() {
		OpCompLvlContext _localctx = new OpCompLvlContext(Context, State);
		EnterRule(_localctx, 70, RULE_opCompLvl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4279398039552L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpValContext primaryExpVal() {
			return GetRuleContext<PrimaryExpValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpRightUnContext opRightUn() {
			return GetRuleContext<OpRightUnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpLeftUnContext opLeftUn() {
			return GetRuleContext<OpLeftUnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscPrimeExpContext miscPrimeExp() {
			return GetRuleContext<MiscPrimeExpContext>(0);
		}
		public PrimaryExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpContext primaryExp() {
		PrimaryExpContext _localctx = new PrimaryExpContext(Context, State);
		EnterRule(_localctx, 72, RULE_primaryExp);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399;
				primaryExpVal();
				State = 401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 400;
					opRightUn();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 403;
				opLeftUn();
				State = 404;
				primaryExpVal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 406;
				miscPrimeExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLeftUnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_DCR() { return GetToken(GrammarParser.UNOP_DCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_INC() { return GetToken(GrammarParser.UNOP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_B_NOT() { return GetToken(GrammarParser.LUNOP_B_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_L_NOT() { return GetToken(GrammarParser.LUNOP_L_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNOP_SIZEOF() { return GetToken(GrammarParser.LUNOP_SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitCastContext explicitCast() {
			return GetRuleContext<ExplicitCastContext>(0);
		}
		public OpLeftUnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLeftUn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpLeftUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpLeftUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLeftUn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLeftUnContext opLeftUn() {
		OpLeftUnContext _localctx = new OpLeftUnContext(Context, State);
		EnterRule(_localctx, 74, RULE_opLeftUn);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNOP_DCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 409;
				Match(UNOP_DCR);
				}
				break;
			case UNOP_INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				Match(UNOP_INC);
				}
				break;
			case LUNOP_B_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 411;
				Match(LUNOP_B_NOT);
				}
				break;
			case LUNOP_L_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 412;
				Match(LUNOP_L_NOT);
				}
				break;
			case LUNOP_SIZEOF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 413;
				Match(LUNOP_SIZEOF);
				}
				break;
			case OP_AND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 414;
				Match(OP_AND);
				}
				break;
			case PARN_OPN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 415;
				explicitCast();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpRightUnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_DCR() { return GetToken(GrammarParser.UNOP_DCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP_INC() { return GetToken(GrammarParser.UNOP_INC, 0); }
		public OpRightUnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opRightUn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOpRightUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOpRightUn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpRightUn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpRightUnContext opRightUn() {
		OpRightUnContext _localctx = new OpRightUnContext(Context, State);
		EnterRule(_localctx, 76, RULE_opRightUn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_la = TokenStream.LA(1);
			if ( !(_la==UNOP_INC || _la==UNOP_DCR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthsExpContext parenthsExp() {
			return GetRuleContext<ParenthsExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpContext literalExp() {
			return GetRuleContext<LiteralExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__funcCallContext ppc__funcCall() {
			return GetRuleContext<Ppc__funcCallContext>(0);
		}
		public PrimaryExpValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExpVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExpVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpValContext primaryExpVal() {
		PrimaryExpValContext _localctx = new PrimaryExpValContext(Context, State);
		EnterRule(_localctx, 78, RULE_primaryExpVal);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				parenthsExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				funcCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 422;
				literalExp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 423;
				ppc__funcCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthsExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		public ParenthsExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthsExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParenthsExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParenthsExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthsExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthsExpContext parenthsExp() {
		ParenthsExpContext _localctx = new ParenthsExpContext(Context, State);
		EnterRule(_localctx, 80, RULE_parenthsExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(PARN_OPN);
			State = 427;
			expression(0);
			State = 428;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscPrimeExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocContext alloc() {
			return GetRuleContext<AllocContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeContext free() {
			return GetRuleContext<FreeContext>(0);
		}
		public MiscPrimeExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_miscPrimeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMiscPrimeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMiscPrimeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMiscPrimeExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MiscPrimeExpContext miscPrimeExp() {
		MiscPrimeExpContext _localctx = new MiscPrimeExpContext(Context, State);
		EnterRule(_localctx, 82, RULE_miscPrimeExp);
		try {
			State = 433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430;
				assignment();
				}
				break;
			case KYW_ALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				alloc();
				}
				break;
			case KYW_FREE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 432;
				free();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_ALLOC() { return GetToken(GrammarParser.KYW_ALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AllocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alloc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlloc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocContext alloc() {
		AllocContext _localctx = new AllocContext(Context, State);
		EnterRule(_localctx, 84, RULE_alloc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(KYW_ALLOC);
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 436;
				expression(0);
				}
				break;
			case 2:
				{
				State = 437;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FREE() { return GetToken(GrammarParser.KYW_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public FreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_free; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeContext free() {
		FreeContext _localctx = new FreeContext(Context, State);
		EnterRule(_localctx, 86, RULE_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(KYW_FREE);
			State = 441;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		public ExplicitCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExplicitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExplicitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCastContext explicitCast() {
		ExplicitCastContext _localctx = new ExplicitCastContext(Context, State);
		EnterRule(_localctx, 88, RULE_explicitCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(PARN_OPN);
			State = 444;
			type();
			State = 445;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASG() { return GetToken(GrammarParser.OP_ASG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 90, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			varRef();
			State = 448;
			Match(OP_ASG);
			State = 449;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncRefContext funcRef() {
			return GetRuleContext<FuncRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 92, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			funcRef();
			State = 452;
			Match(PARN_OPN);
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & -1170926557237875705L) != 0)) {
				{
				State = 453;
				funcParamVals();
				}
			}

			State = 456;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamValsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public FuncParamValsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParamVals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncParamVals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncParamVals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParamVals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamValsContext funcParamVals() {
		FuncParamValsContext _localctx = new FuncParamValsContext(Context, State);
		EnterRule(_localctx, 94, RULE_funcParamVals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			expression(0);
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 459;
				Match(COMMA);
				State = 460;
				expression(0);
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public FuncRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncRefContext funcRef() {
		FuncRefContext _localctx = new FuncRefContext(Context, State);
		EnterRule(_localctx, 96, RULE_funcRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__varRefContext ppc__varRef() {
			return GetRuleContext<Ppc__varRefContext>(0);
		}
		public LiteralExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpContext literalExp() {
		LiteralExpContext _localctx = new LiteralExpContext(Context, State);
		EnterRule(_localctx, 98, RULE_literalExp);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468;
				nullLiteral();
				}
				break;
			case OP_ADD:
			case OP_SUB:
			case OP_REF:
			case INT_STR:
			case HEX_STR:
			case OCT_STR:
			case BIN_STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 469;
				numLiteral();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 470;
				strLiteral();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 471;
				charLiteral();
				}
				break;
			case KYW_TRUE:
			case KYW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 472;
				boolLiteral();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 473;
				varRef();
				}
				break;
			case PPC_ID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 474;
				ppc__varRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_NULL() { return GetToken(GrammarParser.KYW_NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(KYW_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumSignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(GrammarParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(GrammarParser.OP_SUB, 0); }
		public NumSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numSign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumSignContext numSign() {
		NumSignContext _localctx = new NumSignContext(Context, State);
		EnterRule(_localctx, 102, RULE_numSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumSignContext numSign() {
			return GetRuleContext<NumSignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_numLiteral);
		int _la;
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OP_ADD || _la==OP_SUB) {
					{
					State = 481;
					numSign();
					}
				}

				State = 484;
				intLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485;
				floatLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntDecLiteralContext intDecLiteral() {
			return GetRuleContext<IntDecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntHexLiteralContext intHexLiteral() {
			return GetRuleContext<IntHexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntBinLiteralContext intBinLiteral() {
			return GetRuleContext<IntBinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntOctLiteralContext intOctLiteral() {
			return GetRuleContext<IntOctLiteralContext>(0);
		}
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_intLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_STR:
				{
				State = 488;
				intDecLiteral();
				}
				break;
			case HEX_STR:
				{
				State = 489;
				intHexLiteral();
				}
				break;
			case BIN_STR:
				{
				State = 490;
				intBinLiteral();
				}
				break;
			case OCT_STR:
				{
				State = 491;
				intOctLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntDecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_STR() { return GetToken(GrammarParser.INT_STR, 0); }
		public IntDecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intDecLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntDecLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntDecLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDecLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntDecLiteralContext intDecLiteral() {
		IntDecLiteralContext _localctx = new IntDecLiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_intDecLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(INT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntHexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_STR() { return GetToken(GrammarParser.HEX_STR, 0); }
		public IntHexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intHexLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntHexLiteralContext intHexLiteral() {
		IntHexLiteralContext _localctx = new IntHexLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_intHexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			Match(HEX_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntBinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_STR() { return GetToken(GrammarParser.BIN_STR, 0); }
		public IntBinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intBinLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntBinLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntBinLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntBinLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntBinLiteralContext intBinLiteral() {
		IntBinLiteralContext _localctx = new IntBinLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_intBinLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(BIN_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntOctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_STR() { return GetToken(GrammarParser.OCT_STR, 0); }
		public IntOctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intOctLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIntOctLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIntOctLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntOctLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntOctLiteralContext intOctLiteral() {
		IntOctLiteralContext _localctx = new IntOctLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_intOctLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(OCT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(GrammarParser.OP_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_STR() { return GetTokens(GrammarParser.INT_STR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_STR(int i) {
			return GetToken(GrammarParser.INT_STR, i);
		}
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 116, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_STR) {
				{
				State = 502;
				Match(INT_STR);
				}
			}

			State = 505;
			Match(OP_REF);
			State = 506;
			Match(INT_STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStrLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStrLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(GrammarParser.CHAR, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_TRUE() { return GetToken(GrammarParser.KYW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FALSE() { return GetToken(GrammarParser.KYW_FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 122, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = TokenStream.LA(1);
			if ( !(_la==KYW_TRUE || _la==KYW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_ACC() { return GetTokens(GrammarParser.OP_ACC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC(int i) {
			return GetToken(GrammarParser.OP_ACC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_REF() { return GetTokens(GrammarParser.OP_REF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF(int i) {
			return GetToken(GrammarParser.OP_REF, i);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 124, RULE_varRef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(ID);
			State = 519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 515;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ACC || _la==OP_REF) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 516;
					Match(ID);
					}
					} 
				}
				State = 521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_IF() { return GetToken(GrammarParser.KYW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(KYW_IF);
			State = 523;
			Match(PARN_OPN);
			State = 524;
			expression(0);
			State = 525;
			Match(PARN_CLS);
			State = 526;
			codeBody();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KYW_ELSE) {
				{
				State = 527;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_ELSE() { return GetToken(GrammarParser.KYW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(KYW_ELSE);
			State = 533;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KYW_IF:
				{
				State = 531;
				ifStatement();
				}
				break;
			case BODY_OPN:
				{
				State = 532;
				codeBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_RETURN() { return GetToken(GrammarParser.KYW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(KYW_RETURN);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & -1170926557237875705L) != 0)) {
				{
				State = 536;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_CONTINUE() { return GetToken(GrammarParser.KYW_CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(KYW_CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_BREAK() { return GetToken(GrammarParser.KYW_BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(KYW_BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public LoopDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLoopDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLoopDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopDeclContext loopDecl() {
		LoopDeclContext _localctx = new LoopDeclContext(Context, State);
		EnterRule(_localctx, 136, RULE_loopDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			varDcl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLoopCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLoopCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopCondContext loopCond() {
		LoopCondContext _localctx = new LoopCondContext(Context, State);
		EnterRule(_localctx, 138, RULE_loopCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEndExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEndExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpContext endExp() {
		EndExpContext _localctx = new EndExpContext(Context, State);
		EnterRule(_localctx, 140, RULE_endExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_FOR() { return GetToken(GrammarParser.KYW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopDeclContext loopDecl() {
			return GetRuleContext<LoopDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GrammarParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GrammarParser.EOS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopCondContext loopCond() {
			return GetRuleContext<LoopCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpContext endExp() {
			return GetRuleContext<EndExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 142, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(KYW_FOR);
			State = 550;
			Match(PARN_OPN);
			State = 551;
			loopDecl();
			State = 552;
			Match(EOS);
			State = 553;
			loopCond();
			State = 554;
			Match(EOS);
			State = 555;
			endExp();
			State = 556;
			Match(PARN_CLS);
			State = 557;
			codeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KYW_WHILE() { return GetToken(GrammarParser.KYW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopCondContext loopCond() {
			return GetRuleContext<LoopCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBodyContext codeBody() {
			return GetRuleContext<CodeBodyContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 144, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(KYW_WHILE);
			State = 560;
			Match(PARN_OPN);
			State = 561;
			loopCond();
			State = 562;
			Match(PARN_CLS);
			State = 563;
			codeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_Code_BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_C_CODE() { return GetToken(GrammarParser.PPC_C_CODE, 0); }
		public Ppc__C_Code_BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Code_Body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Code_Body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Code_Body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Code_Body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_Code_BodyContext ppc__C_Code_Body() {
		Ppc__C_Code_BodyContext _localctx = new Ppc__C_Code_BodyContext(Context, State);
		EnterRule(_localctx, 146, RULE_ppc__C_Code_Body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(PPC_C_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Ppc__C_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_idContext ppc__C_id() {
		Ppc__C_idContext _localctx = new Ppc__C_idContext(Context, State);
		EnterRule(_localctx, 148, RULE_ppc__C_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_idContext ppc__C_id() {
			return GetRuleContext<Ppc__C_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public Ppc__C_FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_FuncContext ppc__C_Func() {
		Ppc__C_FuncContext _localctx = new Ppc__C_FuncContext(Context, State);
		EnterRule(_localctx, 150, RULE_ppc__C_Func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			ppc__C_id();
			State = 570;
			Match(PARN_OPN);
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & -1170926557237875705L) != 0)) {
				{
				State = 571;
				funcParamVals();
				}
			}

			State = 574;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__C_Func_MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_C_LAMDA() { return GetToken(GrammarParser.PPC_C_LAMDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__C_FuncContext ppc__C_Func() {
			return GetRuleContext<Ppc__C_FuncContext>(0);
		}
		public Ppc__C_Func_MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__C_Func_Map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__C_Func_Map(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__C_Func_Map(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__C_Func_Map(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__C_Func_MapContext ppc__C_Func_Map() {
		Ppc__C_Func_MapContext _localctx = new Ppc__C_Func_MapContext(Context, State);
		EnterRule(_localctx, 152, RULE_ppc__C_Func_Map);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(PPC_C_LAMDA);
			State = 577;
			ppc__C_Func();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__varRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_ID() { return GetToken(GrammarParser.PPC_ID, 0); }
		public Ppc__varRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__varRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__varRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__varRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__varRefContext ppc__varRef() {
		Ppc__varRefContext _localctx = new Ppc__varRefContext(Context, State);
		EnterRule(_localctx, 154, RULE_ppc__varRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(PPC_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__funcRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_ID() { return GetToken(GrammarParser.PPC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPC_DEEP_ID() { return GetToken(GrammarParser.PPC_DEEP_ID, 0); }
		public Ppc__funcRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__funcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__funcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__funcRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__funcRefContext ppc__funcRef() {
		Ppc__funcRefContext _localctx = new Ppc__funcRefContext(Context, State);
		EnterRule(_localctx, 156, RULE_ppc__funcRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(_la==PPC_ID || _la==PPC_DEEP_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__funcCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ppc__funcRefContext ppc__funcRef() {
			return GetRuleContext<Ppc__funcRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamValsContext funcParamVals() {
			return GetRuleContext<FuncParamValsContext>(0);
		}
		public Ppc__funcCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__funcCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__funcCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__funcCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__funcCallContext ppc__funcCall() {
		Ppc__funcCallContext _localctx = new Ppc__funcCallContext(Context, State);
		EnterRule(_localctx, 158, RULE_ppc__funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			ppc__funcRef();
			State = 584;
			Match(PARN_OPN);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & -1170926557237875705L) != 0)) {
				{
				State = 585;
				funcParamVals();
				}
			}

			State = 588;
			Match(PARN_CLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ppc__TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ACC() { return GetToken(GrammarParser.OP_ACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(GrammarParser.OP_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(GrammarParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(GrammarParser.OP_GRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LST() { return GetToken(GrammarParser.OP_LST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_OPN() { return GetToken(GrammarParser.PARN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARN_CLS() { return GetToken(GrammarParser.PARN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQPN_OPN() { return GetToken(GrammarParser.SQPN_OPN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQPN_CLS() { return GetToken(GrammarParser.SQPN_CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public Ppc__TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ppc__Token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPpc__Token(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPpc__Token(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPpc__Token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ppc__TokenContext ppc__Token() {
		Ppc__TokenContext _localctx = new Ppc__TokenContext(Context, State);
		EnterRule(_localctx, 160, RULE_ppc__Token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & 171806606849L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,72,593,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,1,0,5,0,164,8,0,10,0,12,0,167,9,0,1,0,1,
		0,1,1,4,1,172,8,1,11,1,12,1,173,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,183,8,
		2,1,3,1,3,1,4,1,4,1,4,1,4,5,4,191,8,4,10,4,12,4,194,9,4,1,4,1,4,1,5,1,
		5,1,5,1,6,4,6,202,8,6,11,6,12,6,203,1,7,1,7,3,7,208,8,7,1,8,1,8,1,9,3,
		9,213,8,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,221,8,9,10,9,12,9,224,9,9,3,9,226,
		8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,239,8,10,
		1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
		1,17,1,17,1,18,1,18,1,19,3,19,260,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		20,1,20,1,20,1,20,5,20,272,8,20,10,20,12,20,275,9,20,1,21,1,21,1,22,3,
		22,280,8,22,1,22,1,22,1,22,1,22,3,22,286,8,22,1,22,1,22,3,22,290,8,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,5,25,303,8,25,10,
		25,12,25,306,9,25,1,26,1,26,1,26,1,26,5,26,312,8,26,10,26,12,26,315,9,
		26,1,27,1,27,5,27,319,8,27,10,27,12,27,322,9,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,3,28,345,8,28,1,29,3,29,348,8,29,1,29,1,29,1,29,1,29,5,29,
		354,8,29,10,29,12,29,357,9,29,1,30,1,30,1,30,3,30,362,8,30,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,5,31,383,8,31,10,31,12,31,386,9,31,1,32,1,32,1,32,1,32,3,
		32,392,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,3,36,402,8,36,1,36,
		1,36,1,36,1,36,3,36,408,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,417,
		8,37,1,38,1,38,1,39,1,39,1,39,1,39,3,39,425,8,39,1,40,1,40,1,40,1,40,1,
		41,1,41,1,41,3,41,434,8,41,1,42,1,42,1,42,3,42,439,8,42,1,43,1,43,1,43,
		1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,455,8,46,1,
		46,1,46,1,47,1,47,1,47,5,47,462,8,47,10,47,12,47,465,9,47,1,48,1,48,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,476,8,49,1,50,1,50,1,51,1,51,1,52,
		3,52,483,8,52,1,52,1,52,3,52,487,8,52,1,53,1,53,1,53,1,53,3,53,493,8,53,
		1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,3,58,504,8,58,1,58,1,58,1,
		58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,5,62,518,8,62,10,62,12,
		62,521,9,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,529,8,63,1,64,1,64,1,64,
		3,64,534,8,64,1,65,1,65,3,65,538,8,65,1,66,1,66,1,67,1,67,1,68,1,68,1,
		69,1,69,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
		72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,3,75,573,
		8,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,3,79,
		587,8,79,1,79,1,79,1,80,1,80,1,80,0,1,62,81,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,0,8,1,0,27,28,1,0,29,33,3,0,29,30,34,34,37,41,
		1,0,18,19,1,0,5,6,1,0,43,44,1,0,67,68,6,0,29,29,38,39,43,44,48,51,64,64,
		66,66,589,0,165,1,0,0,0,2,171,1,0,0,0,4,182,1,0,0,0,6,184,1,0,0,0,8,186,
		1,0,0,0,10,197,1,0,0,0,12,201,1,0,0,0,14,205,1,0,0,0,16,209,1,0,0,0,18,
		212,1,0,0,0,20,229,1,0,0,0,22,240,1,0,0,0,24,243,1,0,0,0,26,245,1,0,0,
		0,28,248,1,0,0,0,30,250,1,0,0,0,32,252,1,0,0,0,34,254,1,0,0,0,36,256,1,
		0,0,0,38,259,1,0,0,0,40,273,1,0,0,0,42,276,1,0,0,0,44,279,1,0,0,0,46,295,
		1,0,0,0,48,297,1,0,0,0,50,299,1,0,0,0,52,313,1,0,0,0,54,316,1,0,0,0,56,
		344,1,0,0,0,58,347,1,0,0,0,60,358,1,0,0,0,62,363,1,0,0,0,64,391,1,0,0,
		0,66,393,1,0,0,0,68,395,1,0,0,0,70,397,1,0,0,0,72,407,1,0,0,0,74,416,1,
		0,0,0,76,418,1,0,0,0,78,424,1,0,0,0,80,426,1,0,0,0,82,433,1,0,0,0,84,435,
		1,0,0,0,86,440,1,0,0,0,88,443,1,0,0,0,90,447,1,0,0,0,92,451,1,0,0,0,94,
		458,1,0,0,0,96,466,1,0,0,0,98,475,1,0,0,0,100,477,1,0,0,0,102,479,1,0,
		0,0,104,486,1,0,0,0,106,492,1,0,0,0,108,494,1,0,0,0,110,496,1,0,0,0,112,
		498,1,0,0,0,114,500,1,0,0,0,116,503,1,0,0,0,118,508,1,0,0,0,120,510,1,
		0,0,0,122,512,1,0,0,0,124,514,1,0,0,0,126,522,1,0,0,0,128,530,1,0,0,0,
		130,535,1,0,0,0,132,539,1,0,0,0,134,541,1,0,0,0,136,543,1,0,0,0,138,545,
		1,0,0,0,140,547,1,0,0,0,142,549,1,0,0,0,144,559,1,0,0,0,146,565,1,0,0,
		0,148,567,1,0,0,0,150,569,1,0,0,0,152,576,1,0,0,0,154,579,1,0,0,0,156,
		581,1,0,0,0,158,583,1,0,0,0,160,590,1,0,0,0,162,164,3,4,2,0,163,162,1,
		0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,
		167,165,1,0,0,0,168,169,5,0,0,1,169,1,1,0,0,0,170,172,5,65,0,0,171,170,
		1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,3,1,0,0,0,
		175,183,3,6,3,0,176,177,3,16,8,0,177,178,5,58,0,0,178,183,1,0,0,0,179,
		183,3,20,10,0,180,183,3,38,19,0,181,183,3,44,22,0,182,175,1,0,0,0,182,
		176,1,0,0,0,182,179,1,0,0,0,182,180,1,0,0,0,182,181,1,0,0,0,183,5,1,0,
		0,0,184,185,3,10,5,0,185,7,1,0,0,0,186,187,5,38,0,0,187,192,5,66,0,0,188,
		189,5,25,0,0,189,191,5,66,0,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,
		1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,196,5,39,0,
		0,196,9,1,0,0,0,197,198,5,1,0,0,198,199,3,8,4,0,199,11,1,0,0,0,200,202,
		5,24,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,
		0,204,13,1,0,0,0,205,207,5,66,0,0,206,208,3,12,6,0,207,206,1,0,0,0,207,
		208,1,0,0,0,208,15,1,0,0,0,209,210,3,58,29,0,210,17,1,0,0,0,211,213,3,
		2,1,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,3,24,12,
		0,215,216,3,30,15,0,216,225,5,48,0,0,217,222,3,26,13,0,218,219,5,45,0,
		0,219,221,3,26,13,0,220,218,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,
		223,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,225,217,1,0,0,0,225,226,1,
		0,0,0,226,227,1,0,0,0,227,228,5,49,0,0,228,19,1,0,0,0,229,238,3,18,9,0,
		230,239,3,54,27,0,231,232,3,22,11,0,232,233,5,58,0,0,233,239,1,0,0,0,234,
		239,3,146,73,0,235,236,3,152,76,0,236,237,5,58,0,0,237,239,1,0,0,0,238,
		230,1,0,0,0,238,231,1,0,0,0,238,234,1,0,0,0,238,235,1,0,0,0,239,21,1,0,
		0,0,240,241,5,42,0,0,241,242,3,62,31,0,242,23,1,0,0,0,243,244,3,14,7,0,
		244,25,1,0,0,0,245,246,3,14,7,0,246,247,3,28,14,0,247,27,1,0,0,0,248,249,
		5,66,0,0,249,29,1,0,0,0,250,251,5,66,0,0,251,31,1,0,0,0,252,253,5,66,0,
		0,253,33,1,0,0,0,254,255,3,58,29,0,255,35,1,0,0,0,256,257,5,66,0,0,257,
		37,1,0,0,0,258,260,3,2,1,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,
		0,0,261,262,5,2,0,0,262,263,3,36,18,0,263,264,5,46,0,0,264,265,3,40,20,
		0,265,266,5,47,0,0,266,39,1,0,0,0,267,272,3,20,10,0,268,269,3,34,17,0,
		269,270,5,58,0,0,270,272,1,0,0,0,271,267,1,0,0,0,271,268,1,0,0,0,272,275,
		1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,41,1,0,0,0,275,273,1,0,0,0,
		276,277,5,66,0,0,277,43,1,0,0,0,278,280,3,2,1,0,279,278,1,0,0,0,279,280,
		1,0,0,0,280,281,1,0,0,0,281,282,5,3,0,0,282,285,3,42,21,0,283,284,5,43,
		0,0,284,286,3,46,23,0,285,283,1,0,0,0,285,286,1,0,0,0,286,289,1,0,0,0,
		287,288,5,4,0,0,288,290,3,50,25,0,289,287,1,0,0,0,289,290,1,0,0,0,290,
		291,1,0,0,0,291,292,5,46,0,0,292,293,3,52,26,0,293,294,5,47,0,0,294,45,
		1,0,0,0,295,296,5,66,0,0,296,47,1,0,0,0,297,298,5,66,0,0,298,49,1,0,0,
		0,299,304,3,48,24,0,300,301,5,45,0,0,301,303,3,48,24,0,302,300,1,0,0,0,
		303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,51,1,0,0,0,306,304,
		1,0,0,0,307,312,3,20,10,0,308,309,3,34,17,0,309,310,5,58,0,0,310,312,1,
		0,0,0,311,307,1,0,0,0,311,308,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,
		313,314,1,0,0,0,314,53,1,0,0,0,315,313,1,0,0,0,316,320,5,46,0,0,317,319,
		3,56,28,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,
		0,0,321,323,1,0,0,0,322,320,1,0,0,0,323,324,5,47,0,0,324,55,1,0,0,0,325,
		326,3,58,29,0,326,327,5,58,0,0,327,345,1,0,0,0,328,329,3,62,31,0,329,330,
		5,58,0,0,330,345,1,0,0,0,331,345,3,126,63,0,332,345,3,142,71,0,333,345,
		3,144,72,0,334,335,3,134,67,0,335,336,5,58,0,0,336,345,1,0,0,0,337,338,
		3,132,66,0,338,339,5,58,0,0,339,345,1,0,0,0,340,341,3,130,65,0,341,342,
		5,58,0,0,342,345,1,0,0,0,343,345,3,2,1,0,344,325,1,0,0,0,344,328,1,0,0,
		0,344,331,1,0,0,0,344,332,1,0,0,0,344,333,1,0,0,0,344,334,1,0,0,0,344,
		337,1,0,0,0,344,340,1,0,0,0,344,343,1,0,0,0,345,57,1,0,0,0,346,348,3,2,
		1,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,350,3,14,7,0,350,
		355,3,60,30,0,351,352,5,45,0,0,352,354,3,60,30,0,353,351,1,0,0,0,354,357,
		1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,59,1,0,0,0,357,355,1,0,0,0,
		358,361,3,32,16,0,359,360,5,23,0,0,360,362,3,62,31,0,361,359,1,0,0,0,361,
		362,1,0,0,0,362,61,1,0,0,0,363,364,6,31,-1,0,364,365,3,72,36,0,365,384,
		1,0,0,0,366,367,10,4,0,0,367,368,3,64,32,0,368,369,3,62,31,5,369,383,1,
		0,0,0,370,371,10,3,0,0,371,372,3,66,33,0,372,373,3,62,31,4,373,383,1,0,
		0,0,374,375,10,2,0,0,375,376,3,68,34,0,376,377,3,62,31,3,377,383,1,0,0,
		0,378,379,10,1,0,0,379,380,3,70,35,0,380,381,3,62,31,2,381,383,1,0,0,0,
		382,366,1,0,0,0,382,370,1,0,0,0,382,374,1,0,0,0,382,378,1,0,0,0,383,386,
		1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,63,1,0,0,0,386,384,1,0,0,0,
		387,392,1,0,0,0,388,392,5,24,0,0,389,392,5,25,0,0,390,392,5,26,0,0,391,
		387,1,0,0,0,391,388,1,0,0,0,391,389,1,0,0,0,391,390,1,0,0,0,392,65,1,0,
		0,0,393,394,7,0,0,0,394,67,1,0,0,0,395,396,7,1,0,0,396,69,1,0,0,0,397,
		398,7,2,0,0,398,71,1,0,0,0,399,401,3,78,39,0,400,402,3,76,38,0,401,400,
		1,0,0,0,401,402,1,0,0,0,402,408,1,0,0,0,403,404,3,74,37,0,404,405,3,78,
		39,0,405,408,1,0,0,0,406,408,3,82,41,0,407,399,1,0,0,0,407,403,1,0,0,0,
		407,406,1,0,0,0,408,73,1,0,0,0,409,417,5,19,0,0,410,417,5,18,0,0,411,417,
		5,21,0,0,412,417,5,20,0,0,413,417,5,22,0,0,414,417,5,29,0,0,415,417,3,
		88,44,0,416,409,1,0,0,0,416,410,1,0,0,0,416,411,1,0,0,0,416,412,1,0,0,
		0,416,413,1,0,0,0,416,414,1,0,0,0,416,415,1,0,0,0,417,75,1,0,0,0,418,419,
		7,3,0,0,419,77,1,0,0,0,420,425,3,80,40,0,421,425,3,92,46,0,422,425,3,98,
		49,0,423,425,3,158,79,0,424,420,1,0,0,0,424,421,1,0,0,0,424,422,1,0,0,
		0,424,423,1,0,0,0,425,79,1,0,0,0,426,427,5,48,0,0,427,428,3,62,31,0,428,
		429,5,49,0,0,429,81,1,0,0,0,430,434,3,90,45,0,431,434,3,84,42,0,432,434,
		3,86,43,0,433,430,1,0,0,0,433,431,1,0,0,0,433,432,1,0,0,0,434,83,1,0,0,
		0,435,438,5,16,0,0,436,439,3,62,31,0,437,439,3,14,7,0,438,436,1,0,0,0,
		438,437,1,0,0,0,439,85,1,0,0,0,440,441,5,15,0,0,441,442,3,124,62,0,442,
		87,1,0,0,0,443,444,5,48,0,0,444,445,3,14,7,0,445,446,5,49,0,0,446,89,1,
		0,0,0,447,448,3,124,62,0,448,449,5,23,0,0,449,450,3,62,31,0,450,91,1,0,
		0,0,451,452,3,96,48,0,452,454,5,48,0,0,453,455,3,94,47,0,454,453,1,0,0,
		0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,5,49,0,0,457,93,1,0,0,0,458,
		463,3,62,31,0,459,460,5,45,0,0,460,462,3,62,31,0,461,459,1,0,0,0,462,465,
		1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,95,1,0,0,0,465,463,1,0,0,0,
		466,467,3,124,62,0,467,97,1,0,0,0,468,476,3,100,50,0,469,476,3,104,52,
		0,470,476,3,118,59,0,471,476,3,120,60,0,472,476,3,122,61,0,473,476,3,124,
		62,0,474,476,3,154,77,0,475,468,1,0,0,0,475,469,1,0,0,0,475,470,1,0,0,
		0,475,471,1,0,0,0,475,472,1,0,0,0,475,473,1,0,0,0,475,474,1,0,0,0,476,
		99,1,0,0,0,477,478,5,7,0,0,478,101,1,0,0,0,479,480,7,0,0,0,480,103,1,0,
		0,0,481,483,3,102,51,0,482,481,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,
		484,487,3,106,53,0,485,487,3,116,58,0,486,482,1,0,0,0,486,485,1,0,0,0,
		487,105,1,0,0,0,488,493,3,108,54,0,489,493,3,110,55,0,490,493,3,112,56,
		0,491,493,3,114,57,0,492,488,1,0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,
		491,1,0,0,0,493,107,1,0,0,0,494,495,5,59,0,0,495,109,1,0,0,0,496,497,5,
		60,0,0,497,111,1,0,0,0,498,499,5,62,0,0,499,113,1,0,0,0,500,501,5,61,0,
		0,501,115,1,0,0,0,502,504,5,59,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,
		505,1,0,0,0,505,506,5,44,0,0,506,507,5,59,0,0,507,117,1,0,0,0,508,509,
		5,64,0,0,509,119,1,0,0,0,510,511,5,63,0,0,511,121,1,0,0,0,512,513,7,4,
		0,0,513,123,1,0,0,0,514,519,5,66,0,0,515,516,7,5,0,0,516,518,5,66,0,0,
		517,515,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,125,
		1,0,0,0,521,519,1,0,0,0,522,523,5,8,0,0,523,524,5,48,0,0,524,525,3,62,
		31,0,525,526,5,49,0,0,526,528,3,54,27,0,527,529,3,128,64,0,528,527,1,0,
		0,0,528,529,1,0,0,0,529,127,1,0,0,0,530,533,5,9,0,0,531,534,3,126,63,0,
		532,534,3,54,27,0,533,531,1,0,0,0,533,532,1,0,0,0,534,129,1,0,0,0,535,
		537,5,12,0,0,536,538,3,62,31,0,537,536,1,0,0,0,537,538,1,0,0,0,538,131,
		1,0,0,0,539,540,5,14,0,0,540,133,1,0,0,0,541,542,5,13,0,0,542,135,1,0,
		0,0,543,544,3,58,29,0,544,137,1,0,0,0,545,546,3,62,31,0,546,139,1,0,0,
		0,547,548,3,62,31,0,548,141,1,0,0,0,549,550,5,10,0,0,550,551,5,48,0,0,
		551,552,3,136,68,0,552,553,5,58,0,0,553,554,3,138,69,0,554,555,5,58,0,
		0,555,556,3,140,70,0,556,557,5,49,0,0,557,558,3,54,27,0,558,143,1,0,0,
		0,559,560,5,11,0,0,560,561,5,48,0,0,561,562,3,138,69,0,562,563,5,49,0,
		0,563,564,3,54,27,0,564,145,1,0,0,0,565,566,5,54,0,0,566,147,1,0,0,0,567,
		568,5,66,0,0,568,149,1,0,0,0,569,570,3,148,74,0,570,572,5,48,0,0,571,573,
		3,94,47,0,572,571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,5,49,
		0,0,575,151,1,0,0,0,576,577,5,55,0,0,577,578,3,150,75,0,578,153,1,0,0,
		0,579,580,5,67,0,0,580,155,1,0,0,0,581,582,7,6,0,0,582,157,1,0,0,0,583,
		584,3,156,78,0,584,586,5,48,0,0,585,587,3,94,47,0,586,585,1,0,0,0,586,
		587,1,0,0,0,587,588,1,0,0,0,588,589,5,49,0,0,589,159,1,0,0,0,590,591,7,
		7,0,0,591,161,1,0,0,0,46,165,173,182,192,203,207,212,222,225,238,259,271,
		273,279,285,289,304,311,313,320,344,347,355,361,382,384,391,401,407,416,
		424,433,438,454,463,475,482,486,492,503,519,528,533,537,572,586
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
